{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty2 = require(\"@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _assertThisInitialized = require(\"@babel/runtime/helpers/assertThisInitialized\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _PanGestureHandler = require(\"../handlers/PanGestureHandler\");\nvar _TapGestureHandler = require(\"../handlers/TapGestureHandler\");\nvar _State = require(\"../State\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n  return cache;\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\nvar DrawerLayout = function (_React$Component) {\n  _inherits(DrawerLayout, _React$Component);\n  var _super = _createSuper(DrawerLayout);\n  function DrawerLayout(_props) {\n    var _this;\n    _classCallCheck(this, DrawerLayout);\n    _this = _super.call(this, _props);\n    _defineProperty(_assertThisInitialized(_this), \"openValue\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"onGestureEvent\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"accessibilityIsModalView\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"pointerEventsView\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"panGestureHandler\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"drawerShown\", false);\n    _defineProperty(_assertThisInitialized(_this), \"updateAnimatedEvent\", function (props, state) {\n      var drawerPosition = props.drawerPosition,\n        drawerWidth = props.drawerWidth,\n        drawerType = props.drawerType;\n      var dragXValue = state.dragX,\n        touchXValue = state.touchX,\n        drawerTranslation = state.drawerTranslation,\n        containerWidth = state.containerWidth;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue);\n\n        touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue));\n\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n\n      var translationX = dragX;\n      if (drawerType === 'front') {\n        var startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n\n      _this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      var gestureOptions = {\n        useNativeDriver: props.useNativeAnimations\n      };\n      if (_this.props.onDrawerSlide) {\n        gestureOptions.listener = function (ev) {\n          var _this$props$onDrawerS, _this$props;\n          var translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n          var position = translationX / _this.state.containerWidth;\n          (_this$props$onDrawerS = (_this$props = _this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n        };\n      }\n      _this.onGestureEvent = _reactNative.Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], gestureOptions);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      _this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"emitStateChanged\", function (newState, drawerWillShow) {\n      var _this$props$onDrawerS2, _this$props2;\n      (_this$props$onDrawerS2 = (_this$props2 = _this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"openingHandlerStateChange\", function (_ref2) {\n      var nativeEvent = _ref2.nativeEvent;\n      if (nativeEvent.oldState === _State.State.ACTIVE) {\n        _this.handleRelease({\n          nativeEvent: nativeEvent\n        });\n      } else if (nativeEvent.state === _State.State.ACTIVE) {\n        _this.emitStateChanged(DRAGGING, false);\n        _this.setState({\n          drawerState: DRAGGING\n        });\n        if (_this.props.keyboardDismissMode === 'on-drag') {\n          _reactNative.Keyboard.dismiss();\n        }\n        if (_this.props.hideStatusBar) {\n          _reactNative.StatusBar.setHidden(true, _this.props.statusBarAnimation || 'slide');\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onTapHandlerStateChange\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      if (_this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && _this.props.drawerLockMode !== 'locked-open') {\n        _this.closeDrawer();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleRelease\", function (_ref4) {\n      var nativeEvent = _ref4.nativeEvent;\n      var _this$props6 = _this.props,\n        drawerWidth = _this$props6.drawerWidth,\n        drawerPosition = _this$props6.drawerPosition,\n        drawerType = _this$props6.drawerType;\n      var containerWidth = _this.state.containerWidth;\n      var dragX = nativeEvent.translationX,\n        velocityX = nativeEvent.velocityX,\n        touchX = nativeEvent.x;\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (_this.drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        _this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        _this.animateDrawer(startOffsetX, 0, velocityX);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"updateShowing\", function (showing) {\n      var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n      _this.drawerShown = showing;\n      (_this$accessibilityIs = _this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      (_this$pointerEventsVi = _this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var _this$props7 = _this.props,\n        drawerPosition = _this$props7.drawerPosition,\n        minSwipeDistance = _this$props7.minSwipeDistance,\n        edgeWidth = _this$props7.edgeWidth;\n      var fromLeft = drawerPosition === 'left';\n\n      var gestureOrientation = (fromLeft ? 1 : -1) * (_this.drawerShown ? -1 : 1);\n\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n\n      (_this$panGestureHandl = _this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"animateDrawer\", function (fromValue, toValue, velocity, speed) {\n      _this.state.dragX.setValue(0);\n      _this.state.touchX.setValue(_this.props.drawerPosition === 'left' ? 0 : _this.state.containerWidth);\n      if (fromValue != null) {\n        var nextFramePosition = fromValue;\n        if (_this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        _this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      var willShow = toValue !== 0;\n      _this.updateShowing(willShow);\n      _this.emitStateChanged(SETTLING, willShow);\n      _this.setState({\n        drawerState: SETTLING\n      });\n      if (_this.props.hideStatusBar) {\n        _reactNative.StatusBar.setHidden(willShow, _this.props.statusBarAnimation || 'slide');\n      }\n      _reactNative.Animated.spring(_this.state.drawerTranslation, {\n        velocity: velocity,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations,\n        speed: speed !== null && speed !== void 0 ? speed : undefined\n      }).start(function (_ref5) {\n        var finished = _ref5.finished;\n        if (finished) {\n          _this.emitStateChanged(IDLE, willShow);\n          _this.setState({\n            drawerOpened: willShow\n          });\n          if (_this.state.drawerState !== DRAGGING) {\n            _this.setState({\n              drawerState: IDLE\n            });\n          }\n          if (willShow) {\n            var _this$props$onDrawerO, _this$props3;\n            (_this$props$onDrawerO = (_this$props3 = _this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n          } else {\n            var _this$props$onDrawerC, _this$props4;\n            (_this$props$onDrawerC = (_this$props4 = _this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n          }\n        }\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"openDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.animateDrawer(\n      undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n\n      _this.forceUpdate();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"closeDrawer\", function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n\n      _this.forceUpdate();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderOverlay\", function () {\n      (0, _invariant.default)(_this.openValue, 'should be set');\n      var overlayOpacity;\n      if (_this.state.drawerState !== IDLE) {\n        overlayOpacity = _this.openValue;\n      } else {\n        overlayOpacity = _this.state.drawerOpened ? 1 : 0;\n      }\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: _this.props.overlayColor\n      };\n      return React.createElement(_TapGestureHandler.TapGestureHandler, {\n        onHandlerStateChange: _this.onTapHandlerStateChange\n      }, React.createElement(_reactNative.Animated.View, {\n        pointerEvents: _this.drawerShown ? 'auto' : 'none',\n        ref: _this.pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles]\n      }));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderDrawer\", function () {\n      var _this$props8 = _this.props,\n        drawerBackgroundColor = _this$props8.drawerBackgroundColor,\n        drawerWidth = _this$props8.drawerWidth,\n        drawerPosition = _this$props8.drawerPosition,\n        drawerType = _this$props8.drawerType,\n        drawerContainerStyle = _this$props8.drawerContainerStyle,\n        contentContainerStyle = _this$props8.contentContainerStyle;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n\n      var reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = _this.openValue;\n      (0, _invariant.default)(openValue, 'should be set');\n      var containerStyles;\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      var drawerTranslateX = 0;\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        if (_this.state.drawerState !== IDLE) {\n          drawerTranslateX = openValue.interpolate({\n            inputRange: [0, 1],\n            outputRange: [closedDrawerOffset, 0],\n            extrapolate: 'clamp'\n          });\n        } else {\n          drawerTranslateX = _this.state.drawerOpened ? 0 : closedDrawerOffset;\n        }\n      }\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(_reactNative.Animated.View, {\n        style: styles.main,\n        onLayout: _this.handleContainerLayout\n      }, React.createElement(_reactNative.Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: _this.drawerShown ? 'no-hide-descendants' : 'yes'\n      }, typeof _this.props.children === 'function' ? _this.props.children(_this.openValue) : _this.props.children, _this.renderOverlay()), React.createElement(_reactNative.Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: _this.accessibilityIsModalView,\n        accessibilityViewIsModal: _this.drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle]\n      }, React.createElement(_reactNative.View, {\n        style: dynamicDrawerStyles\n      }, _this.props.renderNavigationView(_this.openValue))));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setPanGestureRef\", function (ref) {\n      var _this$props$onGesture, _this$props5;\n\n      _this.panGestureHandler.current = ref;\n      (_this$props$onGesture = (_this$props5 = _this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n    });\n    var _dragX = new _reactNative.Animated.Value(0);\n    var _touchX = new _reactNative.Animated.Value(0);\n    var _drawerTranslation = new _reactNative.Animated.Value(0);\n    _this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false\n    };\n    _this.updateAnimatedEvent(_props, _this.state);\n    return _this;\n  }\n  _createClass(DrawerLayout, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props9 = this.props,\n        drawerPosition = _this$props9.drawerPosition,\n        drawerLockMode = _this$props9.drawerLockMode,\n        edgeWidth = _this$props9.edgeWidth,\n        minSwipeDistance = _this$props9.minSwipeDistance;\n      var fromLeft = drawerPosition === 'left';\n\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: this.drawerShown ? undefined : edgeWidth\n      };\n      return React.createElement(_PanGestureHandler.PanGestureHandler, {\n        ref: this.setPanGestureRef,\n        hitSlop: hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n        failOffsetY: [-15, 15],\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.openingHandlerStateChange,\n        enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n        enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n      }, this.renderDrawer());\n    }\n  }]);\n  return DrawerLayout;\n}(React.Component);\nexports.default = DrawerLayout;\n_defineProperty(DrawerLayout, \"defaultProps\", {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: 'unlocked',\n  enableTrackpadTwoFingerGesture: false\n});\n_defineProperty(DrawerLayout, \"positions\", {\n  Left: 'left',\n  Right: 'right'\n});\nvar styles = _reactNative.StyleSheet.create({\n  drawerContainer: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, _reactNative.StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"sources":["DrawerLayout.tsx"],"names":["DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","Component","drawerWidth","drawerPosition","useNativeAnimations","drawerType","edgeWidth","minSwipeDistance","overlayColor","drawerLockMode","enableTrackpadTwoFingerGesture","constructor","props","dragX","Animated","Value","touchX","drawerTranslation","state","containerWidth","drawerState","drawerOpened","updateAnimatedEvent","UNSAFE_componentWillUpdate","React","createRef","Left","Right","dragXValue","touchXValue","multiply","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","setState","layout","width","newState","drawerWillShow","onDrawerStateChanged","oldState","State","ACTIVE","handleRelease","emitStateChanged","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","drawerShown","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","finished","onDrawerOpen","onDrawerClose","options","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","onTapHandlerStateChange","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","handleContainerLayout","containerOnBack","containerInFront","children","renderOverlay","drawerContainer","renderNavigationView","ref","onGestureRef","render","setPanGestureRef","openingHandlerStateChange","renderDrawer","create","StyleSheet","absoluteFillObject","zIndex","flex","overflow"],"mappings":"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","sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: Animated.AnimatedInterpolation) => React.ReactNode);\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  UNSAFE_componentWillUpdate(\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private openValue?: Animated.AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // it's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | Animated.AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | Animated.AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (this\n      .panGestureHandler as React.MutableRefObject<PanGestureHandler>).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}