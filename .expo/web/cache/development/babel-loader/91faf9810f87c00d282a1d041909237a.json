{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _toArray from \"@babel/runtime/helpers/toArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { callNative, NativeNfcManager } from \"../NativeNfcManager\";\nimport { handleNativeException } from \"../NfcError\";\nvar NfcVHandler = function () {\n  function NfcVHandler() {\n    _classCallCheck(this, NfcVHandler);\n  }\n  _createClass(NfcVHandler, [{\n    key: \"transceive\",\n    value: function () {\n      var _transceive = _asyncToGenerator(function* (bytes) {\n        if (!Array.isArray(bytes)) {\n          throw new Error('IsoDepHandler.transceive only takes input as a byte array');\n        }\n        if (Platform.OS === 'ios') {\n          var _bytes = _toArray(bytes),\n            flags = _bytes[0],\n            commandCode = _bytes[1],\n            data = _bytes.slice(2);\n          return handleNativeException(new Promise(function (resolve, reject) {\n            NativeNfcManager.iso15693_sendRequest({\n              flags: flags,\n              commandCode: commandCode,\n              data: data\n            }, function (err, responseFlag, response) {\n              if (err) {\n                reject(err);\n              } else {\n                resolve([responseFlag].concat(_toConsumableArray(response)));\n              }\n            });\n          }));\n        }\n        return handleNativeException(callNative('transceive', [bytes]));\n      });\n      function transceive(_x) {\n        return _transceive.apply(this, arguments);\n      }\n      return transceive;\n    }()\n  }]);\n  return NfcVHandler;\n}();\nexport { NfcVHandler };","map":{"version":3,"names":["callNative","NativeNfcManager","handleNativeException","NfcVHandler","bytes","Array","isArray","Error","Platform","OS","flags","commandCode","data","Promise","resolve","reject","iso15693_sendRequest","err","responseFlag","response"],"sources":["/Users/dp-tonmai/Documents/my-solito-app/node_modules/react-native-nfc-manager/src/NfcTech/NfcVHandler.js"],"sourcesContent":["import {Platform} from 'react-native';\nimport {callNative, NativeNfcManager} from '../NativeNfcManager';\nimport {handleNativeException} from '../NfcError';\n\nclass NfcVHandler {\n  async transceive(bytes) {\n    if (!Array.isArray(bytes)) {\n      throw new Error(\n        'IsoDepHandler.transceive only takes input as a byte array',\n      );\n    }\n\n    if (Platform.OS === 'ios') {\n      const [flags, commandCode, ...data] = bytes;\n      return handleNativeException(\n        new Promise((resolve, reject) => {\n          NativeNfcManager.iso15693_sendRequest(\n            {\n                flags,\n                commandCode,\n                data,\n            },\n            (err, responseFlag, response) => {\n              if (err) {\n                reject(err);\n              } else {\n                resolve([responseFlag, ...response]);\n              }\n            },\n          );\n        }),\n      );\n    }\n\n    return handleNativeException(callNative('transceive', [bytes]));\n  }\n}\n\nexport {NfcVHandler};\n"],"mappings":";;;;;;AACA,SAAQA,UAAU,EAAEC,gBAAgB;AACpC,SAAQC,qBAAqB;AAAqB,IAE5CC,WAAW;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;MAAA,oCACf,WAAiBC,KAAK,EAAE;QACtB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,EAAE;UACzB,MAAM,IAAIG,KAAK,CACb,2DAA2D,CAC5D;QACH;QAEA,IAAIC,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;UACzB,sBAAsCL,KAAK;YAApCM,KAAK;YAAEC,WAAW;YAAKC,IAAI;UAClC,OAAOV,qBAAqB,CAC1B,IAAIW,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;YAC/Bd,gBAAgB,CAACe,oBAAoB,CACnC;cACIN,KAAK,EAALA,KAAK;cACLC,WAAW,EAAXA,WAAW;cACXC,IAAI,EAAJA;YACJ,CAAC,EACD,UAACK,GAAG,EAAEC,YAAY,EAAEC,QAAQ,EAAK;cAC/B,IAAIF,GAAG,EAAE;gBACPF,MAAM,CAACE,GAAG,CAAC;cACb,CAAC,MAAM;gBACLH,OAAO,EAAEI,YAAY,4BAAKC,QAAQ,GAAE;cACtC;YACF,CAAC,CACF;UACH,CAAC,CAAC,CACH;QACH;QAEA,OAAOjB,qBAAqB,CAACF,UAAU,CAAC,YAAY,EAAE,CAACI,KAAK,CAAC,CAAC,CAAC;MACjE,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAGH,SAAQD,WAAW"},"metadata":{},"sourceType":"module"}