{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ForceTouchGestureHandler = exports.forceTouchHandlerName = exports.forceTouchGestureHandlerProps = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _utils = require(\"../utils\");\nvar _PlatformConstants = _interopRequireDefault(require(\"../PlatformConstants\"));\nvar _createHandler = _interopRequireDefault(require(\"./createHandler\"));\nvar _gestureHandlerCommon = require(\"./gestureHandlerCommon\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar forceTouchGestureHandlerProps = ['minForce', 'maxForce', 'feedbackOnActivation'];\n\nexports.forceTouchGestureHandlerProps = forceTouchGestureHandlerProps;\nvar ForceTouchFallback = function (_react$default$Compon) {\n  _inherits(ForceTouchFallback, _react$default$Compon);\n  var _super = _createSuper(ForceTouchFallback);\n  function ForceTouchFallback() {\n    _classCallCheck(this, ForceTouchFallback);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ForceTouchFallback, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      console.warn((0, _utils.tagMessage)('ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n  return ForceTouchFallback;\n}(_react.default.Component);\n_defineProperty(ForceTouchFallback, \"forceTouchAvailable\", false);\nvar forceTouchHandlerName = 'ForceTouchGestureHandler';\n\nexports.forceTouchHandlerName = forceTouchHandlerName;\nvar ForceTouchGestureHandler = _PlatformConstants.default !== null && _PlatformConstants.default !== void 0 && _PlatformConstants.default.forceTouchAvailable ? (0, _createHandler.default)({\n  name: forceTouchHandlerName,\n  allowedProps: [].concat(_toConsumableArray(_gestureHandlerCommon.baseGestureHandlerProps), forceTouchGestureHandlerProps),\n  config: {}\n}) : ForceTouchFallback;\nexports.ForceTouchGestureHandler = ForceTouchGestureHandler;\nForceTouchGestureHandler.forceTouchAvailable = (_PlatformConstants.default === null || _PlatformConstants.default === void 0 ? void 0 : _PlatformConstants.default.forceTouchAvailable) || false;","map":{"version":3,"sources":["ForceTouchGestureHandler.ts"],"names":["forceTouchGestureHandlerProps","ForceTouchFallback","React","Component","componentDidMount","console","warn","render","props","children","forceTouchHandlerName","ForceTouchGestureHandler","forceTouchAvailable","name","allowedProps","baseGestureHandlerProps","config"],"mappings":";;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;AACA,IAAA,MAAA,GAAA,OAAA,YAAA;AACA,IAAA,kBAAA,GAAA,sBAAA,CAAA,OAAA,wBAAA,CAAA;AACA,IAAA,cAAA,GAAA,sBAAA,CAAA,OAAA,mBAAA,CAAA;AACA,IAAA,qBAAA,GAAA,OAAA,0BAAA;;;;;;;;;;;;;;;;;;;AAKO,IAAMA,6BAA6B,GAAG,CAC3C,UAD2C,EAE3C,UAF2C,EAG3C,sBAH2C,CAAtC;;;IAODC,kBAAN;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAEEG,6BAAoB;MAClBC,OAAO,CAACC,IAARD,CACE,CAAA,CAAA,EAAA,MAAA,CAAA,UAAA,EACE,8NADF,CADFA,CAAAA;IAKD;EAAA;IAAA;IAAA,OACDE,kBAAS;MACP,OAAO,IAAA,CAAKC,KAAL,CAAWC,QAAlB;IACD;EAAA;EAAA;AAAA,EAX8BP,MAAAA,CAAAA,OAAAA,CAAMC,SAAvC;gBAAMF,kB,yBACyB,K;AAsDxB,IAAMS,qBAAqB,GAAG,0BAA9B;;;AAGA,IAAMC,wBAAwB,GAAG,kBAAA,CAAA,OAAA,KAAA,IAAA,IAAA,kBAAA,CAAA,OAAA,KAAA,KAAA,CAAA,IAAA,kBAAA,CAAA,OAAA,CAAmBC,mBAAnB,GACpC,CAAA,CAAA,EAAA,cAAA,CAAA,OAAA,EAGE;EACAC,IAAI,EAAEH,qBADN;EAEAI,YAAY,+BACPC,qBAAAA,CAAAA,uBADS,GAETf,6BAFS,CAFd;EAMAgB,MAAM,EAAE,CAAA;AANR,CAHF,CADoC,GAYpCf,kBAZG;;AAcNU,wBAAD,CAAuDC,mBAAvD,GACE,CAAA,kBAAA,CAAA,OAAA,KAAA,IAAA,IAAA,kBAAA,CAAA,OAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,kBAAA,CAAA,OAAA,CAAmBA,mBAAnB,KAA0C,KAD5C","sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport { tagMessage } from '../utils';\nimport PlatformConstants from '../PlatformConstants';\nimport createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const forceTouchGestureHandlerProps = [\n  'minForce',\n  'maxForce',\n  'feedbackOnActivation',\n] as const;\n\n// implicit `children` prop has been removed in @types/react^18.0.0\nclass ForceTouchFallback extends React.Component<PropsWithChildren<unknown>> {\n  static forceTouchAvailable = false;\n  componentDidMount() {\n    console.warn(\n      tagMessage(\n        'ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase'\n      )\n    );\n  }\n  render() {\n    return this.props.children;\n  }\n}\n\nexport type ForceTouchGestureHandlerEventPayload = {\n  x: number;\n  y: number;\n  absoluteX: number;\n  absoluteY: number;\n\n  /**\n   * The pressure of a touch.\n   */\n  force: number;\n};\n\nexport interface ForceTouchGestureConfig {\n  /**\n   *\n   * A minimal pressure that is required before handler can activate. Should be a\n   * value from range `[0.0, 1.0]`. Default is `0.2`.\n   */\n  minForce?: number;\n\n  /**\n   * A maximal pressure that could be applied for handler. If the pressure is\n   * greater, handler fails. Should be a value from range `[0.0, 1.0]`.\n   */\n  maxForce?: number;\n\n  /**\n   * Boolean value defining if haptic feedback has to be performed on\n   * activation.\n   */\n  feedbackOnActivation?: boolean;\n}\n\nexport interface ForceTouchGestureHandlerProps\n  extends BaseGestureHandlerProps<ForceTouchGestureHandlerEventPayload>,\n    ForceTouchGestureConfig {}\n\nexport type ForceTouchGestureHandler = typeof ForceTouchGestureHandler & {\n  forceTouchAvailable: boolean;\n};\n\nexport const forceTouchHandlerName = 'ForceTouchGestureHandler';\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const ForceTouchGestureHandler = PlatformConstants?.forceTouchAvailable\n  ? createHandler<\n      ForceTouchGestureHandlerProps,\n      ForceTouchGestureHandlerEventPayload\n    >({\n      name: forceTouchHandlerName,\n      allowedProps: [\n        ...baseGestureHandlerProps,\n        ...forceTouchGestureHandlerProps,\n      ] as const,\n      config: {},\n    })\n  : ForceTouchFallback;\n\n(ForceTouchGestureHandler as ForceTouchGestureHandler).forceTouchAvailable =\n  PlatformConstants?.forceTouchAvailable || false;\n"]},"metadata":{},"sourceType":"script"}