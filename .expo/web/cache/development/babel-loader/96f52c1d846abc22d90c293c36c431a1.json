{"ast":null,"code":"var util = require(\"./util\");\nvar protocols = require(\"./constants\").RTD_URI_PROTOCOLS;\n\nfunction decode(data) {\n  var prefix = protocols[data[0]];\n  if (!prefix) {\n    prefix = '';\n  }\n  return prefix + util.bytesToString(data.slice(1));\n}\n\nfunction encode(uri) {\n  var prefix, protocolCode, encoded;\n\n  protocols.slice(1).forEach(function (protocol) {\n    if ((!prefix || prefix === 'urn:') && uri.indexOf(protocol) === 0) {\n      prefix = protocol;\n    }\n  });\n  if (!prefix) {\n    prefix = '';\n  }\n  encoded = util.stringToBytes(uri.slice(prefix.length));\n  protocolCode = protocols.indexOf(prefix);\n  encoded.unshift(protocolCode);\n  return encoded;\n}\nmodule.exports = {\n  encodePayload: encode,\n  decodePayload: decode\n};","map":{"version":3,"names":["util","require","protocols","RTD_URI_PROTOCOLS","decode","data","prefix","bytesToString","slice","encode","uri","protocolCode","encoded","forEach","protocol","indexOf","stringToBytes","length","unshift","module","exports","encodePayload","decodePayload"],"sources":["/Users/dp-tonmai/Documents/my-solito-app/node_modules/react-native-nfc-manager/ndef-lib/ndef-uri.js"],"sourcesContent":["const util = require('./util');\nconst protocols = require('./constants').RTD_URI_PROTOCOLS;\n\n// decode a URI payload bytes\n// @returns a string\nfunction decode(data) {\n  var prefix = protocols[data[0]];\n  if (!prefix) {\n    // 36 to 255 should be \"\"\n    prefix = '';\n  }\n  return prefix + util.bytesToString(data.slice(1));\n}\n\n// shorten a URI with standard prefix\n// @returns an array of bytes\nfunction encode(uri) {\n  var prefix, protocolCode, encoded;\n\n  // check each protocol, unless we've found a match\n  // \"urn:\" is the one exception where we need to keep checking\n  // slice so we don't check \"\"\n  protocols.slice(1).forEach(function (protocol) {\n    if ((!prefix || prefix === 'urn:') && uri.indexOf(protocol) === 0) {\n      prefix = protocol;\n    }\n  });\n\n  if (!prefix) {\n    prefix = '';\n  }\n\n  encoded = util.stringToBytes(uri.slice(prefix.length));\n  protocolCode = protocols.indexOf(prefix);\n  // prepend protocol code\n  encoded.unshift(protocolCode);\n\n  return encoded;\n}\n\nmodule.exports = {\n  encodePayload: encode,\n  decodePayload: decode,\n};\n"],"mappings":"AAAA,IAAMA,IAAI,GAAGC,OAAO,UAAU;AAC9B,IAAMC,SAAS,GAAGD,OAAO,eAAe,CAACE,iBAAiB;;AAI1D,SAASC,MAAM,CAACC,IAAI,EAAE;EACpB,IAAIC,MAAM,GAAGJ,SAAS,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;EAC/B,IAAI,CAACC,MAAM,EAAE;IAEXA,MAAM,GAAG,EAAE;EACb;EACA,OAAOA,MAAM,GAAGN,IAAI,CAACO,aAAa,CAACF,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC;AACnD;;AAIA,SAASC,MAAM,CAACC,GAAG,EAAE;EACnB,IAAIJ,MAAM,EAAEK,YAAY,EAAEC,OAAO;;EAKjCV,SAAS,CAACM,KAAK,CAAC,CAAC,CAAC,CAACK,OAAO,CAAC,UAAUC,QAAQ,EAAE;IAC7C,IAAI,CAAC,CAACR,MAAM,IAAIA,MAAM,KAAK,MAAM,KAAKI,GAAG,CAACK,OAAO,CAACD,QAAQ,CAAC,KAAK,CAAC,EAAE;MACjER,MAAM,GAAGQ,QAAQ;IACnB;EACF,CAAC,CAAC;EAEF,IAAI,CAACR,MAAM,EAAE;IACXA,MAAM,GAAG,EAAE;EACb;EAEAM,OAAO,GAAGZ,IAAI,CAACgB,aAAa,CAACN,GAAG,CAACF,KAAK,CAACF,MAAM,CAACW,MAAM,CAAC,CAAC;EACtDN,YAAY,GAAGT,SAAS,CAACa,OAAO,CAACT,MAAM,CAAC;EAExCM,OAAO,CAACM,OAAO,CAACP,YAAY,CAAC;EAE7B,OAAOC,OAAO;AAChB;AAEAO,MAAM,CAACC,OAAO,GAAG;EACfC,aAAa,EAAEZ,MAAM;EACrBa,aAAa,EAAElB;AACjB,CAAC"},"metadata":{},"sourceType":"script"}