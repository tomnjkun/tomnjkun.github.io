{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { callNative } from \"../NativeNfcManager\";\nimport { handleNativeException } from \"../NfcError\";\nvar MifareClassicHandlerAndroid = function () {\n  function MifareClassicHandlerAndroid(nfcManager) {\n    _classCallCheck(this, MifareClassicHandlerAndroid);\n    this.nfcManager = nfcManager;\n  }\n  _createClass(MifareClassicHandlerAndroid, [{\n    key: \"mifareClassicAuthenticateA\",\n    value: function () {\n      var _mifareClassicAuthenticateA = _asyncToGenerator(function* (sector, key) {\n        if (!key || !Array.isArray(key) || key.length !== 6) {\n          throw new Error('key should be an Array[6] of integers (0 - 255)');\n        }\n        return handleNativeException(callNative('mifareClassicAuthenticateA', [sector, key]));\n      });\n      function mifareClassicAuthenticateA(_x, _x2) {\n        return _mifareClassicAuthenticateA.apply(this, arguments);\n      }\n      return mifareClassicAuthenticateA;\n    }()\n  }, {\n    key: \"mifareClassicAuthenticateB\",\n    value: function () {\n      var _mifareClassicAuthenticateB = _asyncToGenerator(function* (sector, key) {\n        if (!key || !Array.isArray(key) || key.length !== 6) {\n          throw new Error('key should be an Array[6] of integers (0 - 255)');\n        }\n        return handleNativeException(callNative('mifareClassicAuthenticateB', [sector, key]));\n      });\n      function mifareClassicAuthenticateB(_x3, _x4) {\n        return _mifareClassicAuthenticateB.apply(this, arguments);\n      }\n      return mifareClassicAuthenticateB;\n    }()\n  }, {\n    key: \"mifareClassicGetBlockCountInSector\",\n    value: function () {\n      var _mifareClassicGetBlockCountInSector = _asyncToGenerator(function* (sector) {\n        return handleNativeException(callNative('mifareClassicGetBlockCountInSector', [sector]));\n      });\n      function mifareClassicGetBlockCountInSector(_x5) {\n        return _mifareClassicGetBlockCountInSector.apply(this, arguments);\n      }\n      return mifareClassicGetBlockCountInSector;\n    }()\n  }, {\n    key: \"mifareClassicGetSectorCount\",\n    value: function () {\n      var _mifareClassicGetSectorCount = _asyncToGenerator(function* () {\n        return handleNativeException(callNative('mifareClassicGetSectorCount'));\n      });\n      function mifareClassicGetSectorCount() {\n        return _mifareClassicGetSectorCount.apply(this, arguments);\n      }\n      return mifareClassicGetSectorCount;\n    }()\n  }, {\n    key: \"mifareClassicSectorToBlock\",\n    value: function () {\n      var _mifareClassicSectorToBlock = _asyncToGenerator(function* (sector) {\n        return handleNativeException(callNative('mifareClassicSectorToBlock', [sector]));\n      });\n      function mifareClassicSectorToBlock(_x6) {\n        return _mifareClassicSectorToBlock.apply(this, arguments);\n      }\n      return mifareClassicSectorToBlock;\n    }()\n  }, {\n    key: \"mifareClassicReadBlock\",\n    value: function () {\n      var _mifareClassicReadBlock = _asyncToGenerator(function* (block) {\n        return handleNativeException(callNative('mifareClassicReadBlock', [block]));\n      });\n      function mifareClassicReadBlock(_x7) {\n        return _mifareClassicReadBlock.apply(this, arguments);\n      }\n      return mifareClassicReadBlock;\n    }()\n  }, {\n    key: \"mifareClassicReadSector\",\n    value: function () {\n      var _mifareClassicReadSector = _asyncToGenerator(function* (sector) {\n        return handleNativeException(callNative('mifareClassicReadSector', [sector]));\n      });\n      function mifareClassicReadSector(_x8) {\n        return _mifareClassicReadSector.apply(this, arguments);\n      }\n      return mifareClassicReadSector;\n    }()\n  }, {\n    key: \"mifareClassicWriteBlock\",\n    value: function () {\n      var _mifareClassicWriteBlock = _asyncToGenerator(function* (block, data) {\n        if (!data || !Array.isArray(data) || data.length !== this.nfcManager.MIFARE_BLOCK_SIZE) {\n          throw new Error(\"data should be a non-empty Array[\" + this.nfcManager.MIFARE_BLOCK_SIZE + \"] of integers (0 - 255)\");\n        }\n        return handleNativeException(callNative('mifareClassicWriteBlock', [block, data]));\n      });\n      function mifareClassicWriteBlock(_x9, _x10) {\n        return _mifareClassicWriteBlock.apply(this, arguments);\n      }\n      return mifareClassicWriteBlock;\n    }()\n  }, {\n    key: \"mifareClassicIncrementBlock\",\n    value: function () {\n      var _mifareClassicIncrementBlock = _asyncToGenerator(function* (block, value) {\n        if (!value || Number.isNaN(value)) {\n          throw new Error(\"value should be a number\");\n        }\n        return handleNativeException(callNative('mifareClassicIncrementBlock', [block, value]));\n      });\n      function mifareClassicIncrementBlock(_x11, _x12) {\n        return _mifareClassicIncrementBlock.apply(this, arguments);\n      }\n      return mifareClassicIncrementBlock;\n    }()\n  }, {\n    key: \"mifareClassicDecrementBlock\",\n    value: function () {\n      var _mifareClassicDecrementBlock = _asyncToGenerator(function* (block, value) {\n        if (!value || Number.isNaN(value)) {\n          throw new Error(\"value should be a number\");\n        }\n        return handleNativeException(callNative('mifareClassicDecrementBlock', [block, value]));\n      });\n      function mifareClassicDecrementBlock(_x13, _x14) {\n        return _mifareClassicDecrementBlock.apply(this, arguments);\n      }\n      return mifareClassicDecrementBlock;\n    }()\n  }, {\n    key: \"mifareClassicTransferBlock\",\n    value: function () {\n      var _mifareClassicTransferBlock = _asyncToGenerator(function* (block) {\n        if (!block || Number.isNaN(block)) {\n          throw new Error(\"block should be a number\");\n        }\n        return handleNativeException(callNative('mifareClassicTransferBlock', [block]));\n      });\n      function mifareClassicTransferBlock(_x15) {\n        return _mifareClassicTransferBlock.apply(this, arguments);\n      }\n      return mifareClassicTransferBlock;\n    }()\n  }]);\n  return MifareClassicHandlerAndroid;\n}();\nexport { MifareClassicHandlerAndroid };","map":{"version":3,"names":["callNative","handleNativeException","MifareClassicHandlerAndroid","nfcManager","sector","key","Array","isArray","length","Error","block","data","MIFARE_BLOCK_SIZE","value","Number","isNaN"],"sources":["/Users/dp-tonmai/Documents/my-solito-app/node_modules/react-native-nfc-manager/src/NfcTech/MifareClassicHandlerAndroid.js"],"sourcesContent":["import {callNative} from '../NativeNfcManager';\nimport {handleNativeException} from '../NfcError';\n\nclass MifareClassicHandlerAndroid {\n  constructor(nfcManager) {\n    this.nfcManager = nfcManager;\n  }\n\n  async mifareClassicAuthenticateA(sector, key) {\n    if (!key || !Array.isArray(key) || key.length !== 6) {\n      throw new Error('key should be an Array[6] of integers (0 - 255)');\n    }\n\n    return handleNativeException(\n      callNative('mifareClassicAuthenticateA', [sector, key]),\n    );\n  }\n\n  async mifareClassicAuthenticateB(sector, key) {\n    if (!key || !Array.isArray(key) || key.length !== 6) {\n      throw new Error('key should be an Array[6] of integers (0 - 255)');\n    }\n\n    return handleNativeException(\n      callNative('mifareClassicAuthenticateB', [sector, key]),\n    );\n  }\n\n  async mifareClassicGetBlockCountInSector(sector) {\n    return handleNativeException(\n      callNative('mifareClassicGetBlockCountInSector', [sector]),\n    );\n  }\n\n  async mifareClassicGetSectorCount() {\n    return handleNativeException(callNative('mifareClassicGetSectorCount'));\n  }\n\n  async mifareClassicSectorToBlock(sector) {\n    return handleNativeException(\n      callNative('mifareClassicSectorToBlock', [sector]),\n    );\n  }\n\n  async mifareClassicReadBlock(block) {\n    return handleNativeException(callNative('mifareClassicReadBlock', [block]));\n  }\n\n  async mifareClassicReadSector(sector) {\n    return handleNativeException(\n      callNative('mifareClassicReadSector', [sector]),\n    );\n  }\n\n  async mifareClassicWriteBlock(block, data) {\n    if (\n      !data ||\n      !Array.isArray(data) ||\n      data.length !== this.nfcManager.MIFARE_BLOCK_SIZE\n    ) {\n      throw new Error(\n        `data should be a non-empty Array[${this.nfcManager.MIFARE_BLOCK_SIZE}] of integers (0 - 255)`,\n      );\n    }\n\n    return handleNativeException(\n      callNative('mifareClassicWriteBlock', [block, data]),\n    );\n  }\n\n  async mifareClassicIncrementBlock(block, value) {\n    if (\n      !value ||\n      Number.isNaN(value)) {\n      throw new Error(\n        `value should be a number`,\n      );\n    }\n\n    return handleNativeException(\n      callNative('mifareClassicIncrementBlock', [block, value]),\n    );\n  }\n\n  async mifareClassicDecrementBlock(block, value) {\n    if (\n      !value ||\n      Number.isNaN(value)) {\n      throw new Error(\n        `value should be a number`,\n      );\n    }\n\n    return handleNativeException(\n      callNative('mifareClassicDecrementBlock', [block, value]),\n    );\n  }\n  async mifareClassicTransferBlock(block) {\n    if (\n      !block ||\n      Number.isNaN(block)) {\n      throw new Error(\n        `block should be a number`,\n      );\n    }\n\n    return handleNativeException(\n      callNative('mifareClassicTransferBlock', [block]),\n    );\n  }\n\n}\n\nexport {MifareClassicHandlerAndroid};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}