{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { callNative } from \"../NativeNfcManager\";\nimport { handleNativeException } from \"../NfcError\";\nvar NdefStatus = {\n  NotSupported: 1,\n  ReadWrite: 2,\n  ReadOnly: 3\n};\nvar NdefHandler = function () {\n  function NdefHandler() {\n    _classCallCheck(this, NdefHandler);\n  }\n  _createClass(NdefHandler, [{\n    key: \"writeNdefMessage\",\n    value: function () {\n      var _writeNdefMessage = _asyncToGenerator(function* (bytes) {\n        return handleNativeException(callNative('writeNdefMessage', [bytes]));\n      });\n      function writeNdefMessage(_x) {\n        return _writeNdefMessage.apply(this, arguments);\n      }\n      return writeNdefMessage;\n    }()\n  }, {\n    key: \"getNdefMessage\",\n    value: function () {\n      var _getNdefMessage = _asyncToGenerator(function* () {\n        return handleNativeException(callNative('getNdefMessage'));\n      });\n      function getNdefMessage() {\n        return _getNdefMessage.apply(this, arguments);\n      }\n      return getNdefMessage;\n    }()\n  }, {\n    key: \"makeReadOnly\",\n    value: function () {\n      var _makeReadOnly = _asyncToGenerator(function* () {\n        return handleNativeException(callNative('makeReadOnly'));\n      });\n      function makeReadOnly() {\n        return _makeReadOnly.apply(this, arguments);\n      }\n      return makeReadOnly;\n    }()\n  }, {\n    key: \"getNdefStatus\",\n    value: function () {\n      var _getNdefStatus = _asyncToGenerator(function* () {\n        if (Platform.OS === 'ios') {\n          return handleNativeException(callNative('queryNDEFStatus'));\n        } else {\n          try {\n            var result = yield handleNativeException(callNative('getNdefStatus'));\n            return {\n              status: result.isWritable ? NdefStatus.ReadWrite : NdefStatus.ReadOnly,\n              capacity: result.maxSize\n            };\n          } catch (ex) {\n            return {\n              status: NdefStatus.NotSupported,\n              capacity: 0\n            };\n          }\n        }\n      });\n      function getNdefStatus() {\n        return _getNdefStatus.apply(this, arguments);\n      }\n      return getNdefStatus;\n    }()\n  }, {\n    key: \"getCachedNdefMessageAndroid\",\n    value: function () {\n      var _getCachedNdefMessageAndroid = _asyncToGenerator(function* () {\n        return handleNativeException(callNative('getCachedNdefMessage'));\n      });\n      function getCachedNdefMessageAndroid() {\n        return _getCachedNdefMessageAndroid.apply(this, arguments);\n      }\n      return getCachedNdefMessageAndroid;\n    }()\n  }]);\n  return NdefHandler;\n}();\nexport { NdefHandler, NdefStatus };","map":{"version":3,"names":["callNative","handleNativeException","NdefStatus","NotSupported","ReadWrite","ReadOnly","NdefHandler","bytes","Platform","OS","result","status","isWritable","capacity","maxSize","ex"],"sources":["/Users/dp-tonmai/Documents/my-solito-app/node_modules/react-native-nfc-manager/src/NfcTech/NdefHandler.js"],"sourcesContent":["import {Platform} from 'react-native';\nimport {callNative} from '../NativeNfcManager';\nimport {handleNativeException} from '../NfcError';\n\nconst NdefStatus = {\n  NotSupported: 1,\n  ReadWrite: 2,\n  ReadOnly: 3,\n};\n\nclass NdefHandler {\n  async writeNdefMessage(bytes) {\n    return handleNativeException(callNative('writeNdefMessage', [bytes]));\n  }\n\n  async getNdefMessage() {\n    return handleNativeException(callNative('getNdefMessage'));\n  }\n\n  async makeReadOnly() {\n    return handleNativeException(callNative('makeReadOnly'));\n  }\n\n  async getNdefStatus() {\n    if (Platform.OS === 'ios') {\n      return handleNativeException(callNative('queryNDEFStatus'));\n    } else {\n      try {\n        const result = await handleNativeException(callNative('getNdefStatus'));\n        return {\n          status: result.isWritable\n            ? NdefStatus.ReadWrite\n            : NdefStatus.ReadOnly,\n          capacity: result.maxSize,\n        };\n      } catch (ex) {\n        return {\n          status: NdefStatus.NotSupported,\n          capacity: 0,\n        };\n      }\n    }\n  }\n\n  async getCachedNdefMessageAndroid() {\n    return handleNativeException(callNative('getCachedNdefMessage'));\n  }\n}\n\nexport {NdefHandler, NdefStatus};\n"],"mappings":";;;;AACA,SAAQA,UAAU;AAClB,SAAQC,qBAAqB;AAE7B,IAAMC,UAAU,GAAG;EACjBC,YAAY,EAAE,CAAC;EACfC,SAAS,EAAE,CAAC;EACZC,QAAQ,EAAE;AACZ,CAAC;AAAC,IAEIC,WAAW;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;MAAA,0CACf,WAAuBC,KAAK,EAAE;QAC5B,OAAON,qBAAqB,CAACD,UAAU,CAAC,kBAAkB,EAAE,CAACO,KAAK,CAAC,CAAC,CAAC;MACvE,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,wCAED,aAAuB;QACrB,OAAON,qBAAqB,CAACD,UAAU,CAAC,gBAAgB,CAAC,CAAC;MAC5D,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,sCAED,aAAqB;QACnB,OAAOC,qBAAqB,CAACD,UAAU,CAAC,cAAc,CAAC,CAAC;MAC1D,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,uCAED,aAAsB;QACpB,IAAIQ,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;UACzB,OAAOR,qBAAqB,CAACD,UAAU,CAAC,iBAAiB,CAAC,CAAC;QAC7D,CAAC,MAAM;UACL,IAAI;YACF,IAAMU,MAAM,SAAST,qBAAqB,CAACD,UAAU,CAAC,eAAe,CAAC,CAAC;YACvE,OAAO;cACLW,MAAM,EAAED,MAAM,CAACE,UAAU,GACrBV,UAAU,CAACE,SAAS,GACpBF,UAAU,CAACG,QAAQ;cACvBQ,QAAQ,EAAEH,MAAM,CAACI;YACnB,CAAC;UACH,CAAC,CAAC,OAAOC,EAAE,EAAE;YACX,OAAO;cACLJ,MAAM,EAAET,UAAU,CAACC,YAAY;cAC/BU,QAAQ,EAAE;YACZ,CAAC;UACH;QACF;MACF,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,qDAED,aAAoC;QAClC,OAAOZ,qBAAqB,CAACD,UAAU,CAAC,sBAAsB,CAAC,CAAC;MAClE,CAAC;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA;AAGH,SAAQM,WAAW,EAAEJ,UAAU"},"metadata":{},"sourceType":"module"}