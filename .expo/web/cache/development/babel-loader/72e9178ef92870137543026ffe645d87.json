{"ast":null,"code":"\"use strict\";\n\nvar _construct = require(\"@babel/runtime/helpers/construct\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureObjects = void 0;\nvar _flingGesture = require(\"./flingGesture\");\nvar _forceTouchGesture = require(\"./forceTouchGesture\");\nvar _gestureComposition = require(\"./gestureComposition\");\nvar _longPressGesture = require(\"./longPressGesture\");\nvar _panGesture = require(\"./panGesture\");\nvar _pinchGesture = require(\"./pinchGesture\");\nvar _rotationGesture = require(\"./rotationGesture\");\nvar _tapGesture = require(\"./tapGesture\");\nvar _nativeGesture = require(\"./nativeGesture\");\nvar _manualGesture = require(\"./manualGesture\");\nvar GestureObjects = {\n  Tap: function Tap() {\n    return new _tapGesture.TapGesture();\n  },\n  Pan: function Pan() {\n    return new _panGesture.PanGesture();\n  },\n  Pinch: function Pinch() {\n    return new _pinchGesture.PinchGesture();\n  },\n  Rotation: function Rotation() {\n    return new _rotationGesture.RotationGesture();\n  },\n  Fling: function Fling() {\n    return new _flingGesture.FlingGesture();\n  },\n  LongPress: function LongPress() {\n    return new _longPressGesture.LongPressGesture();\n  },\n  ForceTouch: function ForceTouch() {\n    return new _forceTouchGesture.ForceTouchGesture();\n  },\n  Native: function Native() {\n    return new _nativeGesture.NativeGesture();\n  },\n  Manual: function Manual() {\n    return new _manualGesture.ManualGesture();\n  },\n  Race: function Race() {\n    for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {\n      gestures[_key] = arguments[_key];\n    }\n    return _construct(_gestureComposition.ComposedGesture, gestures);\n  },\n  Simultaneous: function Simultaneous() {\n    for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      gestures[_key2] = arguments[_key2];\n    }\n    return _construct(_gestureComposition.SimultaneousGesture, gestures);\n  },\n  Exclusive: function Exclusive() {\n    for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      gestures[_key3] = arguments[_key3];\n    }\n    return _construct(_gestureComposition.ExclusiveGesture, gestures);\n  }\n};\nexports.GestureObjects = GestureObjects;","map":{"version":3,"sources":["gestureObjects.ts"],"names":["GestureObjects","Tap","TapGesture","Pan","PanGesture","Pinch","PinchGesture","Rotation","RotationGesture","Fling","FlingGesture","LongPress","LongPressGesture","ForceTouch","ForceTouchGesture","Native","NativeGesture","Manual","ManualGesture","Race","gestures","ComposedGesture","Simultaneous","SimultaneousGesture","Exclusive","ExclusiveGesture"],"mappings":";;;;;;;AAAA,IAAA,aAAA,GAAA,OAAA,kBAAA;AACA,IAAA,kBAAA,GAAA,OAAA,uBAAA;AAEA,IAAA,mBAAA,GAAA,OAAA,wBAAA;AAKA,IAAA,iBAAA,GAAA,OAAA,sBAAA;AACA,IAAA,WAAA,GAAA,OAAA,gBAAA;AACA,IAAA,aAAA,GAAA,OAAA,kBAAA;AACA,IAAA,gBAAA,GAAA,OAAA,qBAAA;AACA,IAAA,WAAA,GAAA,OAAA,gBAAA;AACA,IAAA,cAAA,GAAA,OAAA,mBAAA;AACA,IAAA,cAAA,GAAA,OAAA,mBAAA;AAEO,IAAMA,cAAc,GAAG;EAC5BC,GAAG,EAAE,eAAM;IACT,OAAO,IAAIC,WAAAA,CAAAA,UAAJ,EAAP;EACD,CAH2B;EAK5BC,GAAG,EAAE,eAAM;IACT,OAAO,IAAIC,WAAAA,CAAAA,UAAJ,EAAP;EACD,CAP2B;EAS5BC,KAAK,EAAE,iBAAM;IACX,OAAO,IAAIC,aAAAA,CAAAA,YAAJ,EAAP;EACD,CAX2B;EAa5BC,QAAQ,EAAE,oBAAM;IACd,OAAO,IAAIC,gBAAAA,CAAAA,eAAJ,EAAP;EACD,CAf2B;EAiB5BC,KAAK,EAAE,iBAAM;IACX,OAAO,IAAIC,aAAAA,CAAAA,YAAJ,EAAP;EACD,CAnB2B;EAqB5BC,SAAS,EAAE,qBAAM;IACf,OAAO,IAAIC,iBAAAA,CAAAA,gBAAJ,EAAP;EACD,CAvB2B;EAyB5BC,UAAU,EAAE,sBAAM;IAChB,OAAO,IAAIC,kBAAAA,CAAAA,iBAAJ,EAAP;EACD,CA3B2B;EA6B5BC,MAAM,EAAE,kBAAM;IACZ,OAAO,IAAIC,cAAAA,CAAAA,aAAJ,EAAP;EACD,CA/B2B;EAiC5BC,MAAM,EAAE,kBAAM;IACZ,OAAO,IAAIC,cAAAA,CAAAA,aAAJ,EAAP;EACD,CAnC2B;EAyC5BC,IAAI,EAAE,gBAA4B;IAAA,kCAAxBC,QAAJ;MAAIA,QAAJ;IAAA;IACJ,kBAAWC,mBAAAA,CAAAA,eAAJ,EAAuBD,QAA9B;EACD,CA3C2B;EAgD5BE,YAAY,0BAAyB;IAAA,mCAArBF,QAAJ;MAAIA,QAAJ;IAAA;IACV,kBAAWG,mBAAAA,CAAAA,mBAAJ,EAA2BH,QAAlC;EACD,CAlD2B;EA2D5BI,SAAS,uBAAyB;IAAA,mCAArBJ,QAAJ;MAAIA,QAAJ;IAAA;IACP,kBAAWK,mBAAAA,CAAAA,gBAAJ,EAAwBL,QAA/B;EACD;AA7D2B,CAAvB","sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport {\n  ComposedGesture,\n  ExclusiveGesture,\n  SimultaneousGesture,\n} from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\n\nexport const GestureObjects = {\n  Tap: () => {\n    return new TapGesture();\n  },\n\n  Pan: () => {\n    return new PanGesture();\n  },\n\n  Pinch: () => {\n    return new PinchGesture();\n  },\n\n  Rotation: () => {\n    return new RotationGesture();\n  },\n\n  Fling: () => {\n    return new FlingGesture();\n  },\n\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n\n  Native: () => {\n    return new NativeGesture();\n  },\n\n  Manual: () => {\n    return new ManualGesture();\n  },\n\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */\n  Race: (...gestures: Gesture[]) => {\n    return new ComposedGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */\n  Simultaneous(...gestures: Gesture[]) {\n    return new SimultaneousGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */\n  Exclusive(...gestures: Gesture[]) {\n    return new ExclusiveGesture(...gestures);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}