{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { callNative } from \"./NativeNfcManager\";\nimport { NfcManagerBase } from \"./NfcManager\";\nimport { MifareClassicHandlerAndroid } from \"./NfcTech/MifareClassicHandlerAndroid\";\nimport { MifareUltralightHandlerAndroid } from \"./NfcTech/MifareUltralightHandlerAndroid\";\nimport { NdefFormatableHandlerAndroid } from \"./NfcTech/NdefFormatableHandlerAndroid\";\nimport { handleNativeException, buildNfcExceptionAndroid } from \"./NfcError\";\nvar NfcAdapter = {\n  FLAG_READER_NFC_A: 0x1,\n  FLAG_READER_NFC_B: 0x2,\n  FLAG_READER_NFC_F: 0x4,\n  FLAG_READER_NFC_V: 0x8,\n  FLAG_READER_NFC_BARCODE: 0x10,\n  FLAG_READER_SKIP_NDEF_CHECK: 0x80,\n  FLAG_READER_NO_PLATFORM_SOUNDS: 0x100\n};\nvar delay = function delay(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n};\nvar NfcManagerAndroid = function (_NfcManagerBase) {\n  _inherits(NfcManagerAndroid, _NfcManagerBase);\n  var _super = _createSuper(NfcManagerAndroid);\n  function NfcManagerAndroid() {\n    var _this;\n    _classCallCheck(this, NfcManagerAndroid);\n    _this = _super.call(this);\n    _this.requestTechnology = function () {\n      var _ref = _asyncToGenerator(function* (tech) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        try {\n          if (typeof tech === 'string') {\n            tech = [tech];\n          }\n          var sessionAvailable = yield _this._hasTagEventRegistrationAndroid();\n\n          if (!sessionAvailable) {\n            yield _this.registerTagEvent(options);\n            _this.cleanUpTagRegistration = true;\n          }\n          return yield callNative('requestTechnology', [tech]);\n        } catch (ex) {\n          throw buildNfcExceptionAndroid(ex);\n        }\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    _this.cancelTechnologyRequest = _asyncToGenerator(function* () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var _options$throwOnError = options.throwOnError,\n        throwOnError = _options$throwOnError === void 0 ? false : _options$throwOnError,\n        _options$delayMsAndro = options.delayMsAndroid,\n        delayMsAndroid = _options$delayMsAndro === void 0 ? 1000 : _options$delayMsAndro;\n      try {\n        yield callNative('cancelTechnologyRequest');\n        if (_this.cleanUpTagRegistration) {\n          yield delay(delayMsAndroid);\n          yield _this.unregisterTagEvent();\n          _this.cleanUpTagRegistration = false;\n        }\n      } catch (ex) {\n        if (throwOnError) {\n          throw buildNfcExceptionAndroid(ex);\n        }\n      }\n    });\n    _this.getBackgroundTag = function () {\n      return handleNativeException(callNative('getBackgroundTag'));\n    };\n    _this.clearBackgroundTag = function () {\n      return handleNativeException(callNative('clearBackgroundTag'));\n    };\n    _this.isEnabled = function () {\n      return handleNativeException(callNative('isEnabled'));\n    };\n    _this.goToNfcSetting = function () {\n      return handleNativeException(callNative('goToNfcSetting'));\n    };\n    _this.getLaunchTagEvent = function () {\n      return handleNativeException(callNative('getLaunchTagEvent'));\n    };\n    _this.setNdefPushMessage = function (bytes) {\n      return handleNativeException(callNative('setNdefPushMessage', [bytes]));\n    };\n    _this.setTimeout = function (timeout) {\n      return handleNativeException(callNative('setTimeout', [timeout]));\n    };\n    _this.connect = function (techs) {\n      return handleNativeException(callNative('connect', [techs]));\n    };\n    _this.close = function () {\n      return handleNativeException(callNative('close'));\n    };\n    _this.transceive = function (bytes) {\n      return handleNativeException(callNative('transceive', [bytes]));\n    };\n    _this.getMaxTransceiveLength = function () {\n      return handleNativeException(callNative('getMaxTransceiveLength'));\n    };\n    _this._hasTagEventRegistrationAndroid = function () {\n      return handleNativeException(callNative('hasTagEventRegistration'));\n    };\n    _this.cleanUpTagRegistration = false;\n    return _this;\n  }\n  _createClass(NfcManagerAndroid, [{\n    key: \"mifareClassicHandlerAndroid\",\n    get:\n    function get() {\n      if (!this._mifareClassicHandlerAndroid) {\n        this._mifareClassicHandlerAndroid = new MifareClassicHandlerAndroid(this);\n      }\n      return this._mifareClassicHandlerAndroid;\n    }\n\n  }, {\n    key: \"mifareUltralightHandlerAndroid\",\n    get:\n    function get() {\n      if (!this._mifareUltralightHandlerAndroid) {\n        this._mifareUltralightHandlerAndroid = new MifareUltralightHandlerAndroid(this);\n      }\n      return this._mifareUltralightHandlerAndroid;\n    }\n\n  }, {\n    key: \"ndefFormatableHandlerAndroid\",\n    get:\n    function get() {\n      if (!this._ndefFormatableHandlerAndroid) {\n        this._ndefFormatableHandlerAndroid = new NdefFormatableHandlerAndroid(this);\n      }\n      return this._ndefFormatableHandlerAndroid;\n    }\n\n  }]);\n  return NfcManagerAndroid;\n}(NfcManagerBase);\nexport { NfcAdapter, NfcManagerAndroid };","map":{"version":3,"names":["callNative","NfcManagerBase","MifareClassicHandlerAndroid","MifareUltralightHandlerAndroid","NdefFormatableHandlerAndroid","handleNativeException","buildNfcExceptionAndroid","NfcAdapter","FLAG_READER_NFC_A","FLAG_READER_NFC_B","FLAG_READER_NFC_F","FLAG_READER_NFC_V","FLAG_READER_NFC_BARCODE","FLAG_READER_SKIP_NDEF_CHECK","FLAG_READER_NO_PLATFORM_SOUNDS","delay","ms","Promise","resolve","setTimeout","NfcManagerAndroid","requestTechnology","tech","options","sessionAvailable","_hasTagEventRegistrationAndroid","registerTagEvent","cleanUpTagRegistration","ex","cancelTechnologyRequest","throwOnError","delayMsAndroid","unregisterTagEvent","getBackgroundTag","clearBackgroundTag","isEnabled","goToNfcSetting","getLaunchTagEvent","setNdefPushMessage","bytes","timeout","connect","techs","close","transceive","getMaxTransceiveLength","_mifareClassicHandlerAndroid","_mifareUltralightHandlerAndroid","_ndefFormatableHandlerAndroid"],"sources":["/Users/dp-tonmai/Documents/my-solito-app/node_modules/react-native-nfc-manager/src/NfcManagerAndroid.js"],"sourcesContent":["import {callNative} from './NativeNfcManager';\nimport {NfcManagerBase} from './NfcManager';\nimport {MifareClassicHandlerAndroid} from './NfcTech/MifareClassicHandlerAndroid';\nimport {MifareUltralightHandlerAndroid} from './NfcTech/MifareUltralightHandlerAndroid';\nimport {NdefFormatableHandlerAndroid} from './NfcTech/NdefFormatableHandlerAndroid';\nimport {handleNativeException, buildNfcExceptionAndroid} from './NfcError';\n\nconst NfcAdapter = {\n  FLAG_READER_NFC_A: 0x1,\n  FLAG_READER_NFC_B: 0x2,\n  FLAG_READER_NFC_F: 0x4,\n  FLAG_READER_NFC_V: 0x8,\n  FLAG_READER_NFC_BARCODE: 0x10,\n  FLAG_READER_SKIP_NDEF_CHECK: 0x80,\n  FLAG_READER_NO_PLATFORM_SOUNDS: 0x100,\n};\n\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nclass NfcManagerAndroid extends NfcManagerBase {\n  constructor() {\n    super();\n    this.cleanUpTagRegistration = false;\n  }\n\n  requestTechnology = async (tech, options = {}) => {\n    try {\n      if (typeof tech === 'string') {\n        tech = [tech];\n      }\n\n      const sessionAvailable = await this._hasTagEventRegistrationAndroid();\n\n      // make sure we do register for tag event\n      if (!sessionAvailable) {\n        await this.registerTagEvent(options);\n        this.cleanUpTagRegistration = true;\n      }\n\n      return await callNative('requestTechnology', [tech]);\n    } catch (ex) {\n      throw buildNfcExceptionAndroid(ex);\n    }\n  };\n\n  cancelTechnologyRequest = async (options = {}) => {\n    const {throwOnError = false, delayMsAndroid = 1000} = options;\n\n    try {\n      await callNative('cancelTechnologyRequest');\n\n      if (this.cleanUpTagRegistration) {\n        await delay(delayMsAndroid);\n        await this.unregisterTagEvent();\n        this.cleanUpTagRegistration = false;\n      }\n    } catch (ex) {\n      if (throwOnError) {\n        throw buildNfcExceptionAndroid(ex);\n      }\n    }\n  };\n\n  getBackgroundTag = () =>\n    handleNativeException(callNative('getBackgroundTag'));\n\n  clearBackgroundTag = () =>\n    handleNativeException(callNative('clearBackgroundTag'));\n\n  // -------------------------------------\n  // public only for Android\n  // -------------------------------------\n  isEnabled = () => handleNativeException(callNative('isEnabled'));\n\n  goToNfcSetting = () => handleNativeException(callNative('goToNfcSetting'));\n\n  getLaunchTagEvent = () =>\n    handleNativeException(callNative('getLaunchTagEvent'));\n\n  setNdefPushMessage = (bytes) =>\n    handleNativeException(callNative('setNdefPushMessage', [bytes]));\n\n  setTimeout = (timeout) =>\n    handleNativeException(callNative('setTimeout', [timeout]));\n\n  connect = (techs) => handleNativeException(callNative('connect', [techs]));\n\n  close = () => handleNativeException(callNative('close'));\n\n  transceive = (bytes) =>\n    handleNativeException(callNative('transceive', [bytes]));\n\n  getMaxTransceiveLength = () =>\n    handleNativeException(callNative('getMaxTransceiveLength'));\n\n  // -------------------------------------\n  // (android) NfcTech.MifareClassic API\n  // -------------------------------------\n  get mifareClassicHandlerAndroid() {\n    if (!this._mifareClassicHandlerAndroid) {\n      this._mifareClassicHandlerAndroid = new MifareClassicHandlerAndroid(this);\n    }\n    return this._mifareClassicHandlerAndroid;\n  }\n\n  // -------------------------------------\n  // (android) NfcTech.MifareUltralight API\n  // -------------------------------------\n  get mifareUltralightHandlerAndroid() {\n    if (!this._mifareUltralightHandlerAndroid) {\n      this._mifareUltralightHandlerAndroid = new MifareUltralightHandlerAndroid(\n        this,\n      );\n    }\n    return this._mifareUltralightHandlerAndroid;\n  }\n\n  // -------------------------------------\n  // (android) NfcTech.NdefFormatable API\n  // -------------------------------------\n  get ndefFormatableHandlerAndroid() {\n    if (!this._ndefFormatableHandlerAndroid) {\n      this._ndefFormatableHandlerAndroid = new NdefFormatableHandlerAndroid(this);\n    }\n    return this._ndefFormatableHandlerAndroid;\n  }\n\n  // -------------------------------------\n  // Android private\n  // -------------------------------------\n  _hasTagEventRegistrationAndroid = () =>\n    handleNativeException(callNative('hasTagEventRegistration'));\n}\n\nexport {NfcAdapter, NfcManagerAndroid};\n"],"mappings":";;;;;;;;AAAA,SAAQA,UAAU;AAClB,SAAQC,cAAc;AACtB,SAAQC,2BAA2B;AACnC,SAAQC,8BAA8B;AACtC,SAAQC,4BAA4B;AACpC,SAAQC,qBAAqB,EAAEC,wBAAwB;AAEvD,IAAMC,UAAU,GAAG;EACjBC,iBAAiB,EAAE,GAAG;EACtBC,iBAAiB,EAAE,GAAG;EACtBC,iBAAiB,EAAE,GAAG;EACtBC,iBAAiB,EAAE,GAAG;EACtBC,uBAAuB,EAAE,IAAI;EAC7BC,2BAA2B,EAAE,IAAI;EACjCC,8BAA8B,EAAE;AAClC,CAAC;AAED,IAAMC,KAAK,GAAG,SAARA,KAAK,CAAGC,EAAE;EAAA,OAAI,IAAIC,OAAO,CAAC,UAAAC,OAAO;IAAA,OAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC;EAAA,EAAC;AAAA;AAAC,IAE9DI,iBAAiB;EAAA;EAAA;EACrB,6BAAc;IAAA;IAAA;IACZ;IAAQ,MAIVC,iBAAiB;MAAA,6BAAG,WAAOC,IAAI,EAAmB;QAAA,IAAjBC,OAAO,uEAAG,CAAC,CAAC;QAC3C,IAAI;UACF,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;YAC5BA,IAAI,GAAG,CAACA,IAAI,CAAC;UACf;UAEA,IAAME,gBAAgB,SAAS,MAAKC,+BAA+B,EAAE;;UAGrE,IAAI,CAACD,gBAAgB,EAAE;YACrB,MAAM,MAAKE,gBAAgB,CAACH,OAAO,CAAC;YACpC,MAAKI,sBAAsB,GAAG,IAAI;UACpC;UAEA,aAAa3B,UAAU,CAAC,mBAAmB,EAAE,CAACsB,IAAI,CAAC,CAAC;QACtD,CAAC,CAAC,OAAOM,EAAE,EAAE;UACX,MAAMtB,wBAAwB,CAACsB,EAAE,CAAC;QACpC;MACF,CAAC;MAAA;QAAA;MAAA;IAAA;IAAA,MAEDC,uBAAuB,qBAAG,aAAwB;MAAA,IAAjBN,OAAO,uEAAG,CAAC,CAAC;MAC3C,4BAAsDA,OAAO,CAAtDO,YAAY;QAAZA,YAAY,sCAAG,KAAK;QAAA,wBAA2BP,OAAO,CAAhCQ,cAAc;QAAdA,cAAc,sCAAG,IAAI;MAElD,IAAI;QACF,MAAM/B,UAAU,CAAC,yBAAyB,CAAC;QAE3C,IAAI,MAAK2B,sBAAsB,EAAE;UAC/B,MAAMZ,KAAK,CAACgB,cAAc,CAAC;UAC3B,MAAM,MAAKC,kBAAkB,EAAE;UAC/B,MAAKL,sBAAsB,GAAG,KAAK;QACrC;MACF,CAAC,CAAC,OAAOC,EAAE,EAAE;QACX,IAAIE,YAAY,EAAE;UAChB,MAAMxB,wBAAwB,CAACsB,EAAE,CAAC;QACpC;MACF;IACF,CAAC;IAAA,MAEDK,gBAAgB,GAAG;MAAA,OACjB5B,qBAAqB,CAACL,UAAU,CAAC,kBAAkB,CAAC,CAAC;IAAA;IAAA,MAEvDkC,kBAAkB,GAAG;MAAA,OACnB7B,qBAAqB,CAACL,UAAU,CAAC,oBAAoB,CAAC,CAAC;IAAA;IAAA,MAKzDmC,SAAS,GAAG;MAAA,OAAM9B,qBAAqB,CAACL,UAAU,CAAC,WAAW,CAAC,CAAC;IAAA;IAAA,MAEhEoC,cAAc,GAAG;MAAA,OAAM/B,qBAAqB,CAACL,UAAU,CAAC,gBAAgB,CAAC,CAAC;IAAA;IAAA,MAE1EqC,iBAAiB,GAAG;MAAA,OAClBhC,qBAAqB,CAACL,UAAU,CAAC,mBAAmB,CAAC,CAAC;IAAA;IAAA,MAExDsC,kBAAkB,GAAG,UAACC,KAAK;MAAA,OACzBlC,qBAAqB,CAACL,UAAU,CAAC,oBAAoB,EAAE,CAACuC,KAAK,CAAC,CAAC,CAAC;IAAA;IAAA,MAElEpB,UAAU,GAAG,UAACqB,OAAO;MAAA,OACnBnC,qBAAqB,CAACL,UAAU,CAAC,YAAY,EAAE,CAACwC,OAAO,CAAC,CAAC,CAAC;IAAA;IAAA,MAE5DC,OAAO,GAAG,UAACC,KAAK;MAAA,OAAKrC,qBAAqB,CAACL,UAAU,CAAC,SAAS,EAAE,CAAC0C,KAAK,CAAC,CAAC,CAAC;IAAA;IAAA,MAE1EC,KAAK,GAAG;MAAA,OAAMtC,qBAAqB,CAACL,UAAU,CAAC,OAAO,CAAC,CAAC;IAAA;IAAA,MAExD4C,UAAU,GAAG,UAACL,KAAK;MAAA,OACjBlC,qBAAqB,CAACL,UAAU,CAAC,YAAY,EAAE,CAACuC,KAAK,CAAC,CAAC,CAAC;IAAA;IAAA,MAE1DM,sBAAsB,GAAG;MAAA,OACvBxC,qBAAqB,CAACL,UAAU,CAAC,wBAAwB,CAAC,CAAC;IAAA;IAAA,MAqC7DyB,+BAA+B,GAAG;MAAA,OAChCpB,qBAAqB,CAACL,UAAU,CAAC,yBAAyB,CAAC,CAAC;IAAA;IA7G5D,MAAK2B,sBAAsB,GAAG,KAAK;IAAC;EACtC;EAAC;IAAA;IAAA;IA2ED,eAAkC;MAChC,IAAI,CAAC,IAAI,CAACmB,4BAA4B,EAAE;QACtC,IAAI,CAACA,4BAA4B,GAAG,IAAI5C,2BAA2B,CAAC,IAAI,CAAC;MAC3E;MACA,OAAO,IAAI,CAAC4C,4BAA4B;IAC1C;;EAAC;IAAA;IAAA;IAKD,eAAqC;MACnC,IAAI,CAAC,IAAI,CAACC,+BAA+B,EAAE;QACzC,IAAI,CAACA,+BAA+B,GAAG,IAAI5C,8BAA8B,CACvE,IAAI,CACL;MACH;MACA,OAAO,IAAI,CAAC4C,+BAA+B;IAC7C;;EAAC;IAAA;IAAA;IAKD,eAAmC;MACjC,IAAI,CAAC,IAAI,CAACC,6BAA6B,EAAE;QACvC,IAAI,CAACA,6BAA6B,GAAG,IAAI5C,4BAA4B,CAAC,IAAI,CAAC;MAC7E;MACA,OAAO,IAAI,CAAC4C,6BAA6B;IAC3C;;EAAC;EAAA;AAAA,EA1G6B/C,cAAc;AAmH9C,SAAQM,UAAU,EAAEa,iBAAiB"},"metadata":{},"sourceType":"module"}