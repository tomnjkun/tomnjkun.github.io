{"ast":null,"code":"var ndef = require(\"./ndef\");\nvar constants = require(\"./constants\");\n\nvar stringifier = {\n  stringify: function stringify(data, separator) {\n    if (Array.isArray(data)) {\n      if (typeof data[0] === 'number') {\n        data = ndef.decodeMessage(data);\n      }\n      return stringifier.printRecords(data, separator);\n    } else {\n      return stringifier.printRecord(data, separator);\n    }\n  },\n  printRecords: function printRecords(message, separator) {\n    if (!separator) {\n      separator = '\\n';\n    }\n    var result = '';\n\n    message.forEach(function (record) {\n      result += stringifier.printRecord(record, separator);\n      result += separator;\n    });\n    return result.slice(0, -1 * separator.length);\n  },\n  printRecord: function printRecord(record, separator) {\n    var result = '';\n    if (!separator) {\n      separator = '\\n';\n    }\n    switch (record.tnf) {\n      case constants.TNF_EMPTY:\n        result += 'Empty Record';\n        result += separator;\n        break;\n      case constants.TNF_WELL_KNOWN:\n        result += stringifier.printWellKnown(record, separator);\n        break;\n      case constants.TNF_MIME_MEDIA:\n        result += 'MIME Media';\n        result += separator;\n        result += s(record.type);\n        result += separator;\n        result += s(record.payload);\n        break;\n      case constants.TNF_ABSOLUTE_URI:\n        result += 'Absolute URI';\n        result += separator;\n        result += s(record.type);\n        result += separator;\n        result += s(record.payload);\n        break;\n      case constants.TNF_EXTERNAL_TYPE:\n        result += 'External';\n        result += separator;\n        result += s(record.type);\n        result += separator;\n        result += s(record.payload);\n        break;\n      default:\n        result += s(\"Can't process TNF \" + record.tnf);\n    }\n    result += separator;\n    return result;\n  },\n  printWellKnown: function printWellKnown(record, separator) {\n    var result = '';\n    if (record.tnf !== constants.TNF_WELL_KNOWN) {\n      return 'ERROR expecting TNF Well Known';\n    }\n    switch (record.type) {\n      case constants.RTD_TEXT:\n        result += 'Text Record';\n        result += separator;\n        result += ndef.text.decodePayload(record.payload);\n        break;\n      case constants.RTD_URI:\n        result += 'URI Record';\n        result += separator;\n        result += ndef.uri.decodePayload(record.payload);\n        break;\n      case constants.RTD_SMART_POSTER:\n        result += 'Smart Poster';\n        result += separator;\n        result += stringifier.printRecords(ndef.decodeMessage(record.payload));\n        break;\n      default:\n        result += record.type + ' Record';\n        result += separator;\n        result += s(record.payload);\n    }\n    return result;\n  },\n  tnfToString: function tnfToString(tnf) {\n    var value = tnf;\n    switch (tnf) {\n      case constants.TNF_EMPTY:\n        value = 'Empty';\n        break;\n      case constants.TNF_WELL_KNOWN:\n        value = 'Well Known';\n        break;\n      case constants.TNF_MIME_MEDIA:\n        value = 'Mime Media';\n        break;\n      case constants.TNF_ABSOLUTE_URI:\n        value = 'Absolute URI';\n        break;\n      case constants.TNF_EXTERNAL_TYPE:\n        value = 'External';\n        break;\n      case constants.TNF_UNKNOWN:\n        value = 'Unknown';\n        break;\n      case constants.TNF_UNCHANGED:\n        value = 'Unchanged';\n        break;\n      case constants.TNF_RESERVED:\n        value = 'Reserved';\n        break;\n    }\n    return value;\n  }\n};\nfunction s(bytes) {\n  if (typeof bytes === 'string') {\n    return bytes;\n  }\n  return bytes.reduce(function (acc, byte) {\n    return acc + String.fromCharCode(byte);\n  }, '');\n}\nmodule.exports = stringifier;","map":{"version":3,"names":["ndef","require","constants","stringifier","stringify","data","separator","Array","isArray","decodeMessage","printRecords","printRecord","message","result","forEach","record","slice","length","tnf","TNF_EMPTY","TNF_WELL_KNOWN","printWellKnown","TNF_MIME_MEDIA","s","type","payload","TNF_ABSOLUTE_URI","TNF_EXTERNAL_TYPE","RTD_TEXT","text","decodePayload","RTD_URI","uri","RTD_SMART_POSTER","tnfToString","value","TNF_UNKNOWN","TNF_UNCHANGED","TNF_RESERVED","bytes","reduce","acc","byte","String","fromCharCode","module","exports"],"sources":["/Users/dp-tonmai/Documents/my-solito-app/node_modules/react-native-nfc-manager/ndef-lib/stringifier.js"],"sourcesContent":["const ndef = require('./ndef');\nconst constants = require('./constants');\n\n// Convert NDEF records and messages to strings\n// This works OK for demos, but real code proably needs\n// a custom implementation. It would be nice to make\n// smarter record objects that can print themselves\nlet stringifier = {\n  stringify: function (data, separator) {\n    if (Array.isArray(data)) {\n      if (typeof data[0] === 'number') {\n        // guessing this message bytes\n        data = ndef.decodeMessage(data);\n      }\n\n      return stringifier.printRecords(data, separator);\n    } else {\n      return stringifier.printRecord(data, separator);\n    }\n  },\n\n  // @message - NDEF Message (array of NDEF Records)\n  // @separator - line separator, optional, defaults to \\n\n  // @returns string with NDEF Message\n  printRecords: function (message, separator) {\n    if (!separator) {\n      separator = '\\n';\n    }\n    let result = '';\n\n    // Print out the payload for each record\n    message.forEach(function (record) {\n      result += stringifier.printRecord(record, separator);\n      result += separator;\n    });\n\n    return result.slice(0, -1 * separator.length);\n  },\n\n  // @record - NDEF Record\n  // @separator - line separator, optional, defaults to \\n\n  // @returns string with NDEF Record\n  printRecord: function (record, separator) {\n    let result = '';\n\n    if (!separator) {\n      separator = '\\n';\n    }\n\n    switch (record.tnf) {\n      case constants.TNF_EMPTY:\n        result += 'Empty Record';\n        result += separator;\n        break;\n      case constants.TNF_WELL_KNOWN:\n        result += stringifier.printWellKnown(record, separator);\n        break;\n      case constants.TNF_MIME_MEDIA:\n        result += 'MIME Media';\n        result += separator;\n        result += s(record.type);\n        result += separator;\n        result += s(record.payload); // might be binary\n        break;\n      case constants.TNF_ABSOLUTE_URI:\n        result += 'Absolute URI';\n        result += separator;\n        result += s(record.type); // the URI is the type\n        result += separator;\n        result += s(record.payload); // might be binary\n        break;\n      case constants.TNF_EXTERNAL_TYPE:\n        // AAR contains strings, other types could\n        // contain binary data\n        result += 'External';\n        result += separator;\n        result += s(record.type);\n        result += separator;\n        result += s(record.payload);\n        break;\n      default:\n        result += s(\"Can't process TNF \" + record.tnf);\n    }\n\n    result += separator;\n    return result;\n  },\n\n  printWellKnown: function (record, separator) {\n    let result = '';\n\n    if (record.tnf !== constants.TNF_WELL_KNOWN) {\n      return 'ERROR expecting TNF Well Known';\n    }\n\n    switch (record.type) {\n      case constants.RTD_TEXT:\n        result += 'Text Record';\n        result += separator;\n        result += ndef.text.decodePayload(record.payload);\n        break;\n      case constants.RTD_URI:\n        result += 'URI Record';\n        result += separator;\n        result += ndef.uri.decodePayload(record.payload);\n        break;\n      case constants.RTD_SMART_POSTER:\n        result += 'Smart Poster';\n        result += separator;\n        // the payload of a smartposter is a NDEF message\n        result += stringifier.printRecords(ndef.decodeMessage(record.payload));\n        break;\n      default:\n        // attempt to display other types\n        result += record.type + ' Record';\n        result += separator;\n        result += s(record.payload);\n    }\n\n    return result;\n  },\n\n  tnfToString: function (tnf) {\n    let value = tnf;\n\n    switch (tnf) {\n      case constants.TNF_EMPTY:\n        value = 'Empty';\n        break;\n      case constants.TNF_WELL_KNOWN:\n        value = 'Well Known';\n        break;\n      case constants.TNF_MIME_MEDIA:\n        value = 'Mime Media';\n        break;\n      case constants.TNF_ABSOLUTE_URI:\n        value = 'Absolute URI';\n        break;\n      case constants.TNF_EXTERNAL_TYPE:\n        value = 'External';\n        break;\n      case constants.TNF_UNKNOWN:\n        value = 'Unknown';\n        break;\n      case constants.TNF_UNCHANGED:\n        value = 'Unchanged';\n        break;\n      case constants.TNF_RESERVED:\n        value = 'Reserved';\n        break;\n    }\n    return value;\n  },\n};\n\nfunction s(bytes) {\n  if (typeof bytes === 'string') {\n    return bytes;\n  }\n\n  return bytes.reduce(function (acc, byte) {\n    return acc + String.fromCharCode(byte);\n  }, '');\n}\n\nmodule.exports = stringifier;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}