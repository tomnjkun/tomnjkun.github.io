{"ast":null,"code":"\"use strict\";var _classCallCheck=require(\"@babel/runtime/helpers/classCallCheck\");var _createClass=require(\"@babel/runtime/helpers/createClass\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\").default;exports.__esModule=true;exports.default=void 0;var _Dimensions=_interopRequireDefault(require(\"../Dimensions\"));var PixelRatio=function(){function PixelRatio(){_classCallCheck(this,PixelRatio);}_createClass(PixelRatio,null,[{key:\"get\",value:function get(){return _Dimensions.default.get('window').scale;}},{key:\"getFontScale\",value:function getFontScale(){return _Dimensions.default.get('window').fontScale||PixelRatio.get();}},{key:\"getPixelSizeForLayoutSize\",value:function getPixelSizeForLayoutSize(layoutSize){return Math.round(layoutSize*PixelRatio.get());}},{key:\"roundToNearestPixel\",value:function roundToNearestPixel(layoutSize){var ratio=PixelRatio.get();return Math.round(layoutSize*ratio)/ratio;}}]);return PixelRatio;}();exports.default=PixelRatio;module.exports=exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","default","exports","__esModule","_Dimensions","PixelRatio","get","scale","fontScale","layoutSize","Math","round","ratio","module"],"sources":["/Users/dp-tonmai/Documents/GitHub/tomnjkun.github.io/node_modules/react-native-web/dist/cjs/exports/PixelRatio/index.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _Dimensions = _interopRequireDefault(require(\"../Dimensions\"));\n\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * PixelRatio gives access to the device pixel density.\n */\nclass PixelRatio {\n  /**\n   * Returns the device pixel density.\n   */\n  static get() {\n    return _Dimensions.default.get('window').scale;\n  }\n  /**\n   * No equivalent for Web\n   */\n\n\n  static getFontScale() {\n    return _Dimensions.default.get('window').fontScale || PixelRatio.get();\n  }\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n\n\n  static getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n\n\n  static roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n\n}\n\nexports.default = PixelRatio;\nmodule.exports = exports.default;"],"mappings":"AAAA,YAAY,CAAC,oIAEb,GAAIA,uBAAsB,CAAGC,OAAO,CAAC,8CAA8C,CAAC,CAACC,OAAO,CAE5FC,OAAO,CAACC,UAAU,CAAG,IAAI,CACzBD,OAAO,CAACD,OAAO,CAAG,IAAK,EAAC,CAExB,GAAIG,YAAW,CAAGL,sBAAsB,CAACC,OAAO,iBAAiB,CAAC,CAAC,GAe7DK,WAAU,mHAId,cAAa,CACX,MAAOD,YAAW,CAACH,OAAO,CAACK,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK,CAChD,CAAC,4BAMD,uBAAsB,CACpB,MAAOH,YAAW,CAACH,OAAO,CAACK,GAAG,CAAC,QAAQ,CAAC,CAACE,SAAS,EAAIH,UAAU,CAACC,GAAG,EAAE,CACxE,CAAC,yCAOD,mCAAiCG,UAAU,CAAE,CAC3C,MAAOC,KAAI,CAACC,KAAK,CAACF,UAAU,CAAGJ,UAAU,CAACC,GAAG,EAAE,CAAC,CAClD,CAAC,mCASD,6BAA2BG,UAAU,CAAE,CACrC,GAAIG,MAAK,CAAGP,UAAU,CAACC,GAAG,EAAE,CAC5B,MAAOI,KAAI,CAACC,KAAK,CAACF,UAAU,CAAGG,KAAK,CAAC,CAAGA,KAAK,CAC/C,CAAC,0BAIHV,OAAO,CAACD,OAAO,CAAGI,UAAU,CAC5BQ,MAAM,CAACX,OAAO,CAAGA,OAAO,CAACD,OAAO"},"metadata":{},"sourceType":"script"}