{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import Platform from\"react-native-web/dist/exports/Platform\";import{callNative,NativeNfcManager}from\"../NativeNfcManager\";import{handleNativeException}from\"../NfcError\";var IsoDepHandler=function(){function IsoDepHandler(){_classCallCheck(this,IsoDepHandler);}_createClass(IsoDepHandler,[{key:\"transceive\",value:function(){var _transceive=_asyncToGenerator(function*(bytes){if(!Array.isArray(bytes)){throw new Error('IsoDepHandler.transceive only takes input as a byte array');}if(Platform.OS==='ios'){return handleNativeException(new Promise(function(resolve,reject){NativeNfcManager.sendCommandAPDUBytes(bytes,function(err,response,sw1,sw2){if(err){reject(err);}else{resolve([].concat(_toConsumableArray(response),[sw1,sw2]));}});}));}return handleNativeException(callNative('transceive',[bytes]));});function transceive(_x){return _transceive.apply(this,arguments);}return transceive;}()}]);return IsoDepHandler;}();export{IsoDepHandler};","map":{"version":3,"names":["callNative","NativeNfcManager","handleNativeException","IsoDepHandler","bytes","Array","isArray","Error","Platform","OS","Promise","resolve","reject","sendCommandAPDUBytes","err","response","sw1","sw2"],"sources":["/Users/dp-tonmai/Documents/GitHub/tomnjkun.github.io/node_modules/react-native-nfc-manager/src/NfcTech/IsoDepHandler.js"],"sourcesContent":["import {Platform} from 'react-native';\nimport {callNative, NativeNfcManager} from '../NativeNfcManager';\nimport {handleNativeException} from '../NfcError';\n\nclass IsoDepHandler {\n  async transceive(bytes) {\n    if (!Array.isArray(bytes)) {\n      throw new Error(\n        'IsoDepHandler.transceive only takes input as a byte array',\n      );\n    }\n\n    if (Platform.OS === 'ios') {\n      return handleNativeException(\n        new Promise((resolve, reject) => {\n          NativeNfcManager.sendCommandAPDUBytes(\n            bytes,\n            (err, response, sw1, sw2) => {\n              if (err) {\n                reject(err);\n              } else {\n                // TODO: make following data the same format as Android\n                resolve([...response, sw1, sw2]);\n              }\n            },\n          );\n        }),\n      );\n    }\n\n    return handleNativeException(callNative('transceive', [bytes]));\n  }\n}\n\nexport {IsoDepHandler};\n"],"mappings":"6UACA,OAAQA,UAAU,CAAEC,gBAAgB,2BACpC,OAAQC,qBAAqB,mBAAqB,GAE5CC,cAAa,2KACjB,UAAiBC,KAAK,CAAE,CACtB,GAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,CAAE,CACzB,KAAM,IAAIG,MAAK,CACb,2DAA2D,CAC5D,CACH,CAEA,GAAIC,QAAQ,CAACC,EAAE,GAAK,KAAK,CAAE,CACzB,MAAOP,sBAAqB,CAC1B,GAAIQ,QAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK,CAC/BX,gBAAgB,CAACY,oBAAoB,CACnCT,KAAK,CACL,SAACU,GAAG,CAAEC,QAAQ,CAAEC,GAAG,CAAEC,GAAG,CAAK,CAC3B,GAAIH,GAAG,CAAE,CACPF,MAAM,CAACE,GAAG,CAAC,CACb,CAAC,IAAM,CAELH,OAAO,8BAAKI,QAAQ,GAAEC,GAAG,CAAEC,GAAG,GAAE,CAClC,CACF,CAAC,CACF,CACH,CAAC,CAAC,CACH,CACH,CAEA,MAAOf,sBAAqB,CAACF,UAAU,CAAC,YAAY,CAAE,CAACI,KAAK,CAAC,CAAC,CAAC,CACjE,CAAC,sHAGH,OAAQD,aAAa"},"metadata":{},"sourceType":"module"}