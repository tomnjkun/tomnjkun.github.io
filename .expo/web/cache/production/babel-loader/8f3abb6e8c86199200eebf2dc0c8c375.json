{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import invariant from'fbjs/lib/invariant';import EmitterSubscription from\"./_EmitterSubscription\";import EventSubscriptionVendor from\"./_EventSubscriptionVendor\";var sparseFilterPredicate=function sparseFilterPredicate(){return true;};var EventEmitter=function(){function EventEmitter(subscriber){_classCallCheck(this,EventEmitter);this._subscriber=subscriber||new EventSubscriptionVendor();}_createClass(EventEmitter,[{key:\"addListener\",value:function addListener(eventType,listener,context){return this._subscriber.addSubscription(eventType,new EmitterSubscription(this,this._subscriber,listener,context));}},{key:\"removeAllListeners\",value:function removeAllListeners(eventType){this._subscriber.removeAllSubscriptions(eventType);}},{key:\"removeSubscription\",value:function removeSubscription(subscription){invariant(subscription.emitter===this,'Subscription does not belong to this emitter.');this._subscriber.removeSubscription(subscription);}},{key:\"listenerCount\",value:function listenerCount(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);return subscriptions?subscriptions.filter(sparseFilterPredicate).length:0;}},{key:\"emit\",value:function emit(eventType){var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription&&subscription.listener){subscription.listener.apply(subscription.context,args);}}}}},{key:\"removeListener\",value:function removeListener(eventType,listener){console.error(\"EventEmitter.removeListener('\"+eventType+\"', ...): Method has been \"+'deprecated. Please instead use `remove()` on the subscription '+'returned by `EventEmitter.addListener`.');var subscriptions=this._subscriber.getSubscriptionsForType(eventType);if(subscriptions){for(var i=0,l=subscriptions.length;i<l;i++){var subscription=subscriptions[i];if(subscription&&subscription.listener===listener){subscription.remove();}}}}}]);return EventEmitter;}();export default EventEmitter;","map":{"version":3,"names":["invariant","EmitterSubscription","EventSubscriptionVendor","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","eventType","listener","context","addSubscription","removeAllSubscriptions","subscription","emitter","removeSubscription","subscriptions","getSubscriptionsForType","filter","length","_len","arguments","args","Array","_key","i","l","apply","console","error","remove"],"sources":["/Users/dp-tonmai/Documents/GitHub/tomnjkun.github.io/node_modules/react-native-web/dist/vendor/react-native/emitter/_EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * \n * @typecheck\n */\nimport invariant from 'fbjs/lib/invariant';\nimport EmitterSubscription from './_EmitterSubscription';\nimport EventSubscriptionVendor from './_EventSubscriptionVendor';\n\nvar sparseFilterPredicate = () => true;\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nclass EventEmitter {\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  constructor(subscriber) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n\n\n  addListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener, context) {\n    return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n  }\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n\n\n  removeAllListeners(eventType) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n\n\n  removeSubscription(subscription) {\n    invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n\n    this._subscriber.removeSubscription(subscription);\n  }\n  /**\n   * Returns the number of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {number}\n   */\n\n\n  listenerCount(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    return subscriptions ? // We filter out missing entries because the array is sparse.\n    // \"callbackfn is called only for elements of the array which actually\n    // exist; it is not called for missing elements of the array.\"\n    // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n    subscriptions.filter(sparseFilterPredicate).length : 0;\n  }\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n\n\n  emit(eventType) {\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  }\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n\n\n  removeListener(eventType, // FIXME: listeners should return void instead of mixed to prevent issues\n  listener) {\n    console.error(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n\n    var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n\n    if (subscriptions) {\n      for (var i = 0, l = subscriptions.length; i < l; i++) {\n        var subscription = subscriptions[i]; // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n\n}\n\nexport default EventEmitter;"],"mappings":"gIAUA,MAAOA,UAAS,KAAM,oBAAoB,CAC1C,MAAOC,oBAAmB,8BAC1B,MAAOC,wBAAuB,kCAE9B,GAAIC,sBAAqB,CAAG,QAAxBA,sBAAqB,SAAS,KAAI,GAAC,GAejCC,aAAY,YAOhB,sBAAYC,UAAU,CAAE,oCACtB,IAAI,CAACC,WAAW,CAAGD,UAAU,EAAI,GAAIH,wBAAuB,EAAE,CAChE,CAAC,oDAiBD,qBAAYK,SAAS,CACrBC,QAAQ,CAAEC,OAAO,CAAE,CACjB,MAAO,KAAI,CAACH,WAAW,CAACI,eAAe,CAACH,SAAS,CAAE,GAAIN,oBAAmB,CAAC,IAAI,CAAE,IAAI,CAACK,WAAW,CAAEE,QAAQ,CAAEC,OAAO,CAAC,CAAC,CACxH,CAAC,kCAUD,4BAAmBF,SAAS,CAAE,CAC5B,IAAI,CAACD,WAAW,CAACK,sBAAsB,CAACJ,SAAS,CAAC,CACpD,CAAC,kCAMD,4BAAmBK,YAAY,CAAE,CAC/BZ,SAAS,CAACY,YAAY,CAACC,OAAO,GAAK,IAAI,CAAE,+CAA+C,CAAC,CAEzF,IAAI,CAACP,WAAW,CAACQ,kBAAkB,CAACF,YAAY,CAAC,CACnD,CAAC,6BAUD,uBAAcL,SAAS,CAAE,CACvB,GAAIQ,cAAa,CAAG,IAAI,CAACT,WAAW,CAACU,uBAAuB,CAACT,SAAS,CAAC,CAEvE,MAAOQ,cAAa,CAIpBA,aAAa,CAACE,MAAM,CAACd,qBAAqB,CAAC,CAACe,MAAM,CAAG,CAAC,CACxD,CAAC,oBAiBD,cAAKX,SAAS,CAAE,CACd,GAAIQ,cAAa,CAAG,IAAI,CAACT,WAAW,CAACU,uBAAuB,CAACT,SAAS,CAAC,CAEvE,GAAIQ,aAAa,CAAE,CACjB,IAAK,GAAII,KAAI,CAAGC,SAAS,CAACF,MAAM,CAAEG,IAAI,CAAG,GAAIC,MAAK,CAACH,IAAI,CAAG,CAAC,CAAGA,IAAI,CAAG,CAAC,CAAG,CAAC,CAAC,CAAEI,IAAI,CAAG,CAAC,CAAEA,IAAI,CAAGJ,IAAI,CAAEI,IAAI,EAAE,CAAE,CAC1GF,IAAI,CAACE,IAAI,CAAG,CAAC,CAAC,CAAGH,SAAS,CAACG,IAAI,CAAC,CAClC,CAEA,IAAK,GAAIC,EAAC,CAAG,CAAC,CAAEC,CAAC,CAAGV,aAAa,CAACG,MAAM,CAAEM,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAE,CAAE,CACpD,GAAIZ,aAAY,CAAGG,aAAa,CAACS,CAAC,CAAC,CAEnC,GAAIZ,YAAY,EAAIA,YAAY,CAACJ,QAAQ,CAAE,CACzCI,YAAY,CAACJ,QAAQ,CAACkB,KAAK,CAACd,YAAY,CAACH,OAAO,CAAEY,IAAI,CAAC,CACzD,CACF,CACF,CACF,CAAC,8BAMD,wBAAed,SAAS,CACxBC,QAAQ,CAAE,CACRmB,OAAO,CAACC,KAAK,CAAC,+BAA+B,CAAGrB,SAAS,CAAG,2BAA2B,CAAG,gEAAgE,CAAG,yCAAyC,CAAC,CAEvM,GAAIQ,cAAa,CAAG,IAAI,CAACT,WAAW,CAACU,uBAAuB,CAACT,SAAS,CAAC,CAEvE,GAAIQ,aAAa,CAAE,CACjB,IAAK,GAAIS,EAAC,CAAG,CAAC,CAAEC,CAAC,CAAGV,aAAa,CAACG,MAAM,CAAEM,CAAC,CAAGC,CAAC,CAAED,CAAC,EAAE,CAAE,CACpD,GAAIZ,aAAY,CAAGG,aAAa,CAACS,CAAC,CAAC,CAGnC,GAAIZ,YAAY,EAAIA,YAAY,CAACJ,QAAQ,GAAKA,QAAQ,CAAE,CACtDI,YAAY,CAACiB,MAAM,EAAE,CACvB,CACF,CACF,CACF,CAAC,4BAIH,cAAezB,aAAY"},"metadata":{},"sourceType":"module"}