{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _toArray from\"@babel/runtime/helpers/toArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import Platform from\"react-native-web/dist/exports/Platform\";import{callNative,NativeNfcManager}from\"../NativeNfcManager\";import{handleNativeException}from\"../NfcError\";var NfcVHandler=function(){function NfcVHandler(){_classCallCheck(this,NfcVHandler);}_createClass(NfcVHandler,[{key:\"transceive\",value:function(){var _transceive=_asyncToGenerator(function*(bytes){if(!Array.isArray(bytes)){throw new Error('IsoDepHandler.transceive only takes input as a byte array');}if(Platform.OS==='ios'){var _bytes=_toArray(bytes),flags=_bytes[0],commandCode=_bytes[1],data=_bytes.slice(2);return handleNativeException(new Promise(function(resolve,reject){NativeNfcManager.iso15693_sendRequest({flags:flags,commandCode:commandCode,data:data},function(err,responseFlag,response){if(err){reject(err);}else{resolve([responseFlag].concat(_toConsumableArray(response)));}});}));}return handleNativeException(callNative('transceive',[bytes]));});function transceive(_x){return _transceive.apply(this,arguments);}return transceive;}()}]);return NfcVHandler;}();export{NfcVHandler};","map":{"version":3,"names":["callNative","NativeNfcManager","handleNativeException","NfcVHandler","bytes","Array","isArray","Error","Platform","OS","flags","commandCode","data","Promise","resolve","reject","iso15693_sendRequest","err","responseFlag","response"],"sources":["/Users/dp-tonmai/Documents/GitHub/tomnjkun.github.io/node_modules/react-native-nfc-manager/src/NfcTech/NfcVHandler.js"],"sourcesContent":["import {Platform} from 'react-native';\nimport {callNative, NativeNfcManager} from '../NativeNfcManager';\nimport {handleNativeException} from '../NfcError';\n\nclass NfcVHandler {\n  async transceive(bytes) {\n    if (!Array.isArray(bytes)) {\n      throw new Error(\n        'IsoDepHandler.transceive only takes input as a byte array',\n      );\n    }\n\n    if (Platform.OS === 'ios') {\n      const [flags, commandCode, ...data] = bytes;\n      return handleNativeException(\n        new Promise((resolve, reject) => {\n          NativeNfcManager.iso15693_sendRequest(\n            {\n                flags,\n                commandCode,\n                data,\n            },\n            (err, responseFlag, response) => {\n              if (err) {\n                reject(err);\n              } else {\n                resolve([responseFlag, ...response]);\n              }\n            },\n          );\n        }),\n      );\n    }\n\n    return handleNativeException(callNative('transceive', [bytes]));\n  }\n}\n\nexport {NfcVHandler};\n"],"mappings":"kYACA,OAAQA,UAAU,CAAEC,gBAAgB,2BACpC,OAAQC,qBAAqB,mBAAqB,GAE5CC,YAAW,qKACf,UAAiBC,KAAK,CAAE,CACtB,GAAI,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,CAAE,CACzB,KAAM,IAAIG,MAAK,CACb,2DAA2D,CAC5D,CACH,CAEA,GAAIC,QAAQ,CAACC,EAAE,GAAK,KAAK,CAAE,CACzB,oBAAsCL,KAAK,EAApCM,KAAK,WAAEC,WAAW,WAAKC,IAAI,iBAClC,MAAOV,sBAAqB,CAC1B,GAAIW,QAAO,CAAC,SAACC,OAAO,CAAEC,MAAM,CAAK,CAC/Bd,gBAAgB,CAACe,oBAAoB,CACnC,CACIN,KAAK,CAALA,KAAK,CACLC,WAAW,CAAXA,WAAW,CACXC,IAAI,CAAJA,IACJ,CAAC,CACD,SAACK,GAAG,CAAEC,YAAY,CAAEC,QAAQ,CAAK,CAC/B,GAAIF,GAAG,CAAE,CACPF,MAAM,CAACE,GAAG,CAAC,CACb,CAAC,IAAM,CACLH,OAAO,EAAEI,YAAY,4BAAKC,QAAQ,GAAE,CACtC,CACF,CAAC,CACF,CACH,CAAC,CAAC,CACH,CACH,CAEA,MAAOjB,sBAAqB,CAACF,UAAU,CAAC,YAAY,CAAE,CAACI,KAAK,CAAC,CAAC,CAAC,CACjE,CAAC,oHAGH,OAAQD,WAAW"},"metadata":{},"sourceType":"module"}