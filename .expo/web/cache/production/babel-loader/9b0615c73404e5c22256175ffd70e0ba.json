{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import Dimensions from\"../Dimensions\";var PixelRatio=function(){function PixelRatio(){_classCallCheck(this,PixelRatio);}_createClass(PixelRatio,null,[{key:\"get\",value:function get(){return Dimensions.get('window').scale;}},{key:\"getFontScale\",value:function getFontScale(){return Dimensions.get('window').fontScale||PixelRatio.get();}},{key:\"getPixelSizeForLayoutSize\",value:function getPixelSizeForLayoutSize(layoutSize){return Math.round(layoutSize*PixelRatio.get());}},{key:\"roundToNearestPixel\",value:function roundToNearestPixel(layoutSize){var ratio=PixelRatio.get();return Math.round(layoutSize*ratio)/ratio;}}]);return PixelRatio;}();export{PixelRatio as default};","map":{"version":3,"names":["Dimensions","PixelRatio","get","scale","fontScale","layoutSize","Math","round","ratio"],"sources":["/Users/dp-tonmai/Documents/GitHub/tomnjkun.github.io/node_modules/react-native-web/dist/exports/PixelRatio/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport Dimensions from '../Dimensions';\n/**\n * PixelRatio gives access to the device pixel density.\n */\n\nexport default class PixelRatio {\n  /**\n   * Returns the device pixel density.\n   */\n  static get() {\n    return Dimensions.get('window').scale;\n  }\n  /**\n   * No equivalent for Web\n   */\n\n\n  static getFontScale() {\n    return Dimensions.get('window').fontScale || PixelRatio.get();\n  }\n  /**\n   * Converts a layout size (dp) to pixel size (px).\n   * Guaranteed to return an integer number.\n   */\n\n\n  static getPixelSizeForLayoutSize(layoutSize) {\n    return Math.round(layoutSize * PixelRatio.get());\n  }\n  /**\n   * Rounds a layout size (dp) to the nearest layout size that corresponds to\n   * an integer number of pixels. For example, on a device with a PixelRatio\n   * of 3, `PixelRatio.roundToNearestPixel(8.4) = 8.33`, which corresponds to\n   * exactly (8.33 * 3) = 25 pixels.\n   */\n\n\n  static roundToNearestPixel(layoutSize) {\n    var ratio = PixelRatio.get();\n    return Math.round(layoutSize * ratio) / ratio;\n  }\n\n}"],"mappings":"gIASA,MAAOA,WAAU,qBAAsB,GAKlBC,WAAU,mHAI7B,cAAa,CACX,MAAOD,WAAU,CAACE,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK,CACvC,CAAC,4BAMD,uBAAsB,CACpB,MAAOH,WAAU,CAACE,GAAG,CAAC,QAAQ,CAAC,CAACE,SAAS,EAAIH,UAAU,CAACC,GAAG,EAAE,CAC/D,CAAC,yCAOD,mCAAiCG,UAAU,CAAE,CAC3C,MAAOC,KAAI,CAACC,KAAK,CAACF,UAAU,CAAGJ,UAAU,CAACC,GAAG,EAAE,CAAC,CAClD,CAAC,mCASD,6BAA2BG,UAAU,CAAE,CACrC,GAAIG,MAAK,CAAGP,UAAU,CAACC,GAAG,EAAE,CAC5B,MAAOI,KAAI,CAACC,KAAK,CAACF,UAAU,CAAGG,KAAK,CAAC,CAAGA,KAAK,CAC/C,CAAC,iCAnCkBP,UAAU"},"metadata":{},"sourceType":"module"}