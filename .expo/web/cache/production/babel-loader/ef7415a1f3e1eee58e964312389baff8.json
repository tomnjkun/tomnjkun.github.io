{"ast":null,"code":"\"use strict\";var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\").default;exports.__esModule=true;exports.default=void 0;var _unitlessNumbers=_interopRequireDefault(require(\"../unitlessNumbers\"));function dangerousStyleValue(name,value,isCustomProperty){var isEmpty=value==null||typeof value==='boolean'||value==='';if(isEmpty){return'';}if(!isCustomProperty&&typeof value==='number'&&value!==0&&!(_unitlessNumbers.default.hasOwnProperty(name)&&_unitlessNumbers.default[name])){return value+'px';}return(''+value).trim();}var _default=dangerousStyleValue;exports.default=_default;module.exports=exports.default;","map":{"version":3,"names":["_interopRequireDefault","require","default","exports","__esModule","_unitlessNumbers","dangerousStyleValue","name","value","isCustomProperty","isEmpty","hasOwnProperty","trim","_default","module"],"sources":["/Users/dp-tonmai/Documents/GitHub/tomnjkun.github.io/node_modules/react-native-web/dist/cjs/modules/setValueForStyles/dangerousStyleValue.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\").default;\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _unitlessNumbers = _interopRequireDefault(require(\"../unitlessNumbers\"));\n\n/* eslint-disable */\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * From React 16.0.0\n * \n */\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n\n  if (isEmpty) {\n    return '';\n  }\n\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(_unitlessNumbers.default.hasOwnProperty(name) && _unitlessNumbers.default[name])) {\n    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  return ('' + value).trim();\n}\n\nvar _default = dangerousStyleValue;\nexports.default = _default;\nmodule.exports = exports.default;"],"mappings":"AAAA,YAAY,CAEZ,GAAIA,uBAAsB,CAAGC,OAAO,CAAC,8CAA8C,CAAC,CAACC,OAAO,CAE5FC,OAAO,CAACC,UAAU,CAAG,IAAI,CACzBD,OAAO,CAACD,OAAO,CAAG,IAAK,EAAC,CAExB,GAAIG,iBAAgB,CAAGL,sBAAsB,CAACC,OAAO,sBAAsB,CAAC,CAuB5E,QAASK,oBAAmB,CAACC,IAAI,CAAEC,KAAK,CAAEC,gBAAgB,CAAE,CAU1D,GAAIC,QAAO,CAAGF,KAAK,EAAI,IAAI,EAAI,MAAOA,MAAK,GAAK,SAAS,EAAIA,KAAK,GAAK,EAAE,CAEzE,GAAIE,OAAO,CAAE,CACX,MAAO,EAAE,CACX,CAEA,GAAI,CAACD,gBAAgB,EAAI,MAAOD,MAAK,GAAK,QAAQ,EAAIA,KAAK,GAAK,CAAC,EAAI,EAAEH,gBAAgB,CAACH,OAAO,CAACS,cAAc,CAACJ,IAAI,CAAC,EAAIF,gBAAgB,CAACH,OAAO,CAACK,IAAI,CAAC,CAAC,CAAE,CACvJ,MAAOC,MAAK,CAAG,IAAI,CACrB,CAEA,MAAO,CAAC,EAAE,CAAGA,KAAK,EAAEI,IAAI,EAAE,CAC5B,CAEA,GAAIC,SAAQ,CAAGP,mBAAmB,CAClCH,OAAO,CAACD,OAAO,CAAGW,QAAQ,CAC1BC,MAAM,CAACX,OAAO,CAAGA,OAAO,CAACD,OAAO"},"metadata":{},"sourceType":"script"}