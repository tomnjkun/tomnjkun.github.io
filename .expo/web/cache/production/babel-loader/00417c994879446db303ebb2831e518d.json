{"ast":null,"code":"var ndef=require(\"./ndef\");var constants=require(\"./constants\");var stringifier={stringify:function stringify(data,separator){if(Array.isArray(data)){if(typeof data[0]==='number'){data=ndef.decodeMessage(data);}return stringifier.printRecords(data,separator);}else{return stringifier.printRecord(data,separator);}},printRecords:function printRecords(message,separator){if(!separator){separator='\\n';}var result='';message.forEach(function(record){result+=stringifier.printRecord(record,separator);result+=separator;});return result.slice(0,-1*separator.length);},printRecord:function printRecord(record,separator){var result='';if(!separator){separator='\\n';}switch(record.tnf){case constants.TNF_EMPTY:result+='Empty Record';result+=separator;break;case constants.TNF_WELL_KNOWN:result+=stringifier.printWellKnown(record,separator);break;case constants.TNF_MIME_MEDIA:result+='MIME Media';result+=separator;result+=s(record.type);result+=separator;result+=s(record.payload);break;case constants.TNF_ABSOLUTE_URI:result+='Absolute URI';result+=separator;result+=s(record.type);result+=separator;result+=s(record.payload);break;case constants.TNF_EXTERNAL_TYPE:result+='External';result+=separator;result+=s(record.type);result+=separator;result+=s(record.payload);break;default:result+=s(\"Can't process TNF \"+record.tnf);}result+=separator;return result;},printWellKnown:function printWellKnown(record,separator){var result='';if(record.tnf!==constants.TNF_WELL_KNOWN){return'ERROR expecting TNF Well Known';}switch(record.type){case constants.RTD_TEXT:result+='Text Record';result+=separator;result+=ndef.text.decodePayload(record.payload);break;case constants.RTD_URI:result+='URI Record';result+=separator;result+=ndef.uri.decodePayload(record.payload);break;case constants.RTD_SMART_POSTER:result+='Smart Poster';result+=separator;result+=stringifier.printRecords(ndef.decodeMessage(record.payload));break;default:result+=record.type+' Record';result+=separator;result+=s(record.payload);}return result;},tnfToString:function tnfToString(tnf){var value=tnf;switch(tnf){case constants.TNF_EMPTY:value='Empty';break;case constants.TNF_WELL_KNOWN:value='Well Known';break;case constants.TNF_MIME_MEDIA:value='Mime Media';break;case constants.TNF_ABSOLUTE_URI:value='Absolute URI';break;case constants.TNF_EXTERNAL_TYPE:value='External';break;case constants.TNF_UNKNOWN:value='Unknown';break;case constants.TNF_UNCHANGED:value='Unchanged';break;case constants.TNF_RESERVED:value='Reserved';break;}return value;}};function s(bytes){if(typeof bytes==='string'){return bytes;}return bytes.reduce(function(acc,byte){return acc+String.fromCharCode(byte);},'');}module.exports=stringifier;","map":{"version":3,"names":["ndef","require","constants","stringifier","stringify","data","separator","Array","isArray","decodeMessage","printRecords","printRecord","message","result","forEach","record","slice","length","tnf","TNF_EMPTY","TNF_WELL_KNOWN","printWellKnown","TNF_MIME_MEDIA","s","type","payload","TNF_ABSOLUTE_URI","TNF_EXTERNAL_TYPE","RTD_TEXT","text","decodePayload","RTD_URI","uri","RTD_SMART_POSTER","tnfToString","value","TNF_UNKNOWN","TNF_UNCHANGED","TNF_RESERVED","bytes","reduce","acc","byte","String","fromCharCode","module","exports"],"sources":["/Users/dp-tonmai/Documents/GitHub/tomnjkun.github.io/node_modules/react-native-nfc-manager/ndef-lib/stringifier.js"],"sourcesContent":["const ndef = require('./ndef');\nconst constants = require('./constants');\n\n// Convert NDEF records and messages to strings\n// This works OK for demos, but real code proably needs\n// a custom implementation. It would be nice to make\n// smarter record objects that can print themselves\nlet stringifier = {\n  stringify: function (data, separator) {\n    if (Array.isArray(data)) {\n      if (typeof data[0] === 'number') {\n        // guessing this message bytes\n        data = ndef.decodeMessage(data);\n      }\n\n      return stringifier.printRecords(data, separator);\n    } else {\n      return stringifier.printRecord(data, separator);\n    }\n  },\n\n  // @message - NDEF Message (array of NDEF Records)\n  // @separator - line separator, optional, defaults to \\n\n  // @returns string with NDEF Message\n  printRecords: function (message, separator) {\n    if (!separator) {\n      separator = '\\n';\n    }\n    let result = '';\n\n    // Print out the payload for each record\n    message.forEach(function (record) {\n      result += stringifier.printRecord(record, separator);\n      result += separator;\n    });\n\n    return result.slice(0, -1 * separator.length);\n  },\n\n  // @record - NDEF Record\n  // @separator - line separator, optional, defaults to \\n\n  // @returns string with NDEF Record\n  printRecord: function (record, separator) {\n    let result = '';\n\n    if (!separator) {\n      separator = '\\n';\n    }\n\n    switch (record.tnf) {\n      case constants.TNF_EMPTY:\n        result += 'Empty Record';\n        result += separator;\n        break;\n      case constants.TNF_WELL_KNOWN:\n        result += stringifier.printWellKnown(record, separator);\n        break;\n      case constants.TNF_MIME_MEDIA:\n        result += 'MIME Media';\n        result += separator;\n        result += s(record.type);\n        result += separator;\n        result += s(record.payload); // might be binary\n        break;\n      case constants.TNF_ABSOLUTE_URI:\n        result += 'Absolute URI';\n        result += separator;\n        result += s(record.type); // the URI is the type\n        result += separator;\n        result += s(record.payload); // might be binary\n        break;\n      case constants.TNF_EXTERNAL_TYPE:\n        // AAR contains strings, other types could\n        // contain binary data\n        result += 'External';\n        result += separator;\n        result += s(record.type);\n        result += separator;\n        result += s(record.payload);\n        break;\n      default:\n        result += s(\"Can't process TNF \" + record.tnf);\n    }\n\n    result += separator;\n    return result;\n  },\n\n  printWellKnown: function (record, separator) {\n    let result = '';\n\n    if (record.tnf !== constants.TNF_WELL_KNOWN) {\n      return 'ERROR expecting TNF Well Known';\n    }\n\n    switch (record.type) {\n      case constants.RTD_TEXT:\n        result += 'Text Record';\n        result += separator;\n        result += ndef.text.decodePayload(record.payload);\n        break;\n      case constants.RTD_URI:\n        result += 'URI Record';\n        result += separator;\n        result += ndef.uri.decodePayload(record.payload);\n        break;\n      case constants.RTD_SMART_POSTER:\n        result += 'Smart Poster';\n        result += separator;\n        // the payload of a smartposter is a NDEF message\n        result += stringifier.printRecords(ndef.decodeMessage(record.payload));\n        break;\n      default:\n        // attempt to display other types\n        result += record.type + ' Record';\n        result += separator;\n        result += s(record.payload);\n    }\n\n    return result;\n  },\n\n  tnfToString: function (tnf) {\n    let value = tnf;\n\n    switch (tnf) {\n      case constants.TNF_EMPTY:\n        value = 'Empty';\n        break;\n      case constants.TNF_WELL_KNOWN:\n        value = 'Well Known';\n        break;\n      case constants.TNF_MIME_MEDIA:\n        value = 'Mime Media';\n        break;\n      case constants.TNF_ABSOLUTE_URI:\n        value = 'Absolute URI';\n        break;\n      case constants.TNF_EXTERNAL_TYPE:\n        value = 'External';\n        break;\n      case constants.TNF_UNKNOWN:\n        value = 'Unknown';\n        break;\n      case constants.TNF_UNCHANGED:\n        value = 'Unchanged';\n        break;\n      case constants.TNF_RESERVED:\n        value = 'Reserved';\n        break;\n    }\n    return value;\n  },\n};\n\nfunction s(bytes) {\n  if (typeof bytes === 'string') {\n    return bytes;\n  }\n\n  return bytes.reduce(function (acc, byte) {\n    return acc + String.fromCharCode(byte);\n  }, '');\n}\n\nmodule.exports = stringifier;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}